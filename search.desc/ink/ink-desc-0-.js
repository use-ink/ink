searchState.loadedDescShard("ink", 0, "A Solidity compatible <code>address</code> type.\nAny error which derives <code>#[derive(ink::SolErrorMetadata)]</code> …\nAny event which derives <code>#[derive(ink::EventMetadata)]</code> and …\nThe <code>Result</code> type for ink! constructors.\nFailed to read execution input for the dispatchable.\nThe API behind the <code>self.env()</code> and <code>Self::env()</code> syntax in …\nContains the error value\nContains the error value\nDerives an implementation of the [<code>ink::Event</code>] trait for …\nDerives the [<code>ink::EventMetadata</code>] trait for the given <code>struct</code>…\nFixed-size uninterpreted hash type with 20 bytes (160 …\nFixed-size uninterpreted hash type with 32 bytes (256 …\nA well known selector reserved for the message required to …\nAn error emitted by the smart contracting language.\nMaximum value.\nThe <code>Result</code> type for ink! messages.\nContains the success value\nContains the success value\nName of equivalent Solidity ABI type.\nName of equivalent Solidity ABI type.\nMaps an arbitrary Rust/ink! type to a Solidity ABI type …\nDerives an implementation of <code>ink::SolDecode</code> for the given …\nMaps an arbitrary Rust/ink! type to a Solidity ABI type …\nDerives an implementation of <code>ink::SolEncode</code> for the given …\nDerives an implementation of <code>ink::sol::SolErrorDecode</code> for …\nDerives an implementation of <code>ink::sol::SolErrorEncode</code> for …\nDerives an implementation of …\nEquivalent Solidity ABI type representation.\nEquivalent Solidity ABI type representation.\nImplemented by contracts that are compiled as dependencies.\nLittle-endian large integer type 256-bit unsigned integer.\nAbstractions for ABI representation and encoding/decoding.\nComputes the absolute difference between self and other.\nReturns the account ID of the executed contract.\nReturns the address of the executed contract.\nExtracts a byte slice containing the entire fixed hash.\nExtracts a byte slice containing the entire fixed hash.\nExtracts a mutable byte slice containing the entire fixed …\nExtracts a mutable byte slice containing the entire fixed …\nExtracts a reference to the byte array containing the …\nExtracts a reference to the byte array containing the …\nExtracts a reference to the byte array containing the …\nExtracts a reference to the byte array containing the …\nReturns a mutable raw pointer to the value.\nReturns a mutable raw pointer to the value.\nReturns a constant raw pointer to the value.\nReturns a constant raw pointer to the value.\nConversion to u128 with overflow checking\nConversion to u32 with overflow checking\nConversion to u64 with overflow checking\nConversion to usize with overflow checking\nAssign the bytes from the byte slice <code>src</code> to <code>self</code>.\nAssign the bytes from the byte slice <code>src</code> to <code>self</code>.\nReturns the balance of the executed contract.\nReturn if specific bit is set.\nReturn the least number of bits needed to represent the …\nComputes and expands into the BLAKE2b 256-bit hash of the …\nReturns the current block number.\nReturns the timestamp of the current block.\nReturn specific byte. Byte 0 is the least significant …\nReturns the address of the caller of the executed contract.\nChecks whether the caller of the current contract is the …\nChecks whether the caller of the current contract is root.\nChecked addition. Returns <code>None</code> if overflow occurred.\nChecked division. Returns <code>None</code> if <code>other == 0</code>.\nChecked multiplication. Returns <code>None</code> if overflow occurred.\nChecked negation. Returns <code>None</code> unless <code>self == 0</code>.\nChecked exponentiation. Returns <code>None</code> if overflow occurred.\nChecked modulus. Returns <code>None</code> if <code>other == 0</code>.\nChecked subtraction. Returns <code>None</code> if overflow occurred.\nReturns the code hash of the contract at the given <code>account</code> …\nDefinitions and facilities mainly used by the ink! codegen.\nCollect the Solidity ABI compatible metadata of all error …\nCollect the <code>EventSpec</code> metadata of all event definitions …\nEntry point for writing ink! smart contracts.\nDefines the interface of a “callee” contract and …\nGenerates a wrapper which can be used for interacting with …\nReturns <code>true</code> if all bits set in <code>b</code> are also set in <code>self</code>.\nReturns <code>true</code> if all bits set in <code>b</code> are also set in <code>self</code>.\nSolidity ABI decode into this type.\nReturns a pair <code>(self / other, self % other)</code>.\nRecovers the compressed ECDSA public key for given …\nReturns an Ethereum address from the ECDSA compressed …\nEmits an event.\nEmits an event using the ink! ABI encoding (i.e. with …\nEmits an event using the Solidity ABI encoding.\nSolidity ABI encode the value.\nSolidity ABI encode the value as a topic (i.e. an indexed …\nImplements the necessary traits for ABI encoding/decoding …\nImplements the necessary traits for a <code>struct</code> to be emitted …\nCreate <code>10**n</code> as this type.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a hash type from the given reference to the …\nReturns the argument unchanged.\nConstructs a hash type from the given bytes array of fixed …\nConstructs a hash type from the given reference to the …\nReturns the argument unchanged.\nConstructs a hash type from the given bytes array of fixed …\nConstructs a hash type from the given reference to the …\nConstructs a hash type from the given reference to the …\nReturns the argument unchanged.\nConverts from big endian representation bytes in memory.\nConvert from a decimal string.\nConverts from little endian representation bytes in memory.\nCreates a new hash type from the given <code>u64</code> value.\nCreates a new hash type from the given <code>u64</code> value.\nCreates a new hash type from the given <code>u64</code> value.\nCreates a new hash type from the given <code>u64</code> value.\nCreates a new hash type from the given <code>u64</code> value.\nCreates a new hash type from the given <code>u64</code> value.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCreate a new fixed-hash from the given slice <code>src</code>.\nCreate a new fixed-hash from the given slice <code>src</code>.\nConverts to <code>Self</code> from <code>Self::SolType</code>.\nCreates a hash type instance from the given string.\nCreates a hash type instance from the given string.\nConverts a string slice in a given base to an integer. …\nMultiplies two 256-bit integers to produce full 512-bit …\nComputes the hash of the given bytes using the …\nComputes the hash of the given SCALE encoded value using …\nInstantiates another contract using the supplied code hash.\nCompute the highest <code>n</code> such that <code>n * n &lt;= self</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInvokes a contract message and returns its result.\nInvokes in delegate manner a code message and returns its …\nChecks whether a contract lives under <code>addr</code>. todo update …\nWhether this is zero.\nReturns <code>true</code> if no bits are set.\nReturns <code>true</code> if no bits are set.\nComputes the Keccak-256 hash of the given string.\nReturns the number of leading zeros in the binary …\nReturns the size of this hash in bytes.\nReturns the size of this hash in bytes.\nLow 2 words (u128)\nConversion to u32\nLow word (u64)\nThe maximum value which can be inhabited by this type.\nCreates an instance of a message builder for an …\nReturns the minimum balance that is required for creating …\nOne (multiplicative identity) of this type.\nAddition which overflows and returns a flag if it does.\nMultiply with overflow, returning a flag if it does.\nNegation with overflow.\nFast exponentiation by squaring. Returns result and …\nSubtraction which underflows and returns a flag if it does.\nReturns the code hash of the contract at the given <code>account</code> …\nFast exponentiation by squaring …\nCreate a new hash with cryptographically random content.\nCreate a new hash with cryptographically random content.\nCreate a new hash with cryptographically random content …\nCreate a new hash with cryptographically random content …\nAssign <code>self</code> to a cryptographically random value.\nAssign <code>self</code> to a cryptographically random value.\nAssign <code>self</code> to a cryptographically random value using the …\nAssign <code>self</code> to a cryptographically random value using the …\nDefinitions and utilities for ink! smart contract static …\nReturns a new fixed hash where all bits are set to the …\nReturns a new fixed hash where all bits are set to the …\nAddition which saturates at the maximum value (Self::MAX).\nMultiplication which saturates at the maximum value..\nSubtraction which saturates at zero.\nDerive the re-exported traits <code>ink::scale::Encode</code>, …\nComputes the ink! selector of the string and expands into …\nComputes the ink! selector of the string and expands into …\nReplace the contract code at the specified address with …\nAbstractions for implementing Solidity ABI …\nReturns the selector of the equivalent Solidity custom …\nVerifies a SR25519 signature against a message and a …\nPrepares the type to be fully compatible and usable with …\nTerminates the existence of a contract.\nDefines a unit test that makes use of ink!’s off-chain …\nRetrieves the account id for a specified address.\nReturns the underlying account identifier of the …\nConvert to big-endian bytes.\nReturns the inner bytes array.\nReturns the inner bytes array.\nConvert to little-endian bytes.\nReturns the lowest 8 bytes interpreted as big-endian.\nReturns the lowest 8 bytes interpreted as big-endian.\nReturns the lowest 8 bytes interpreted as little-endian.\nReturns the lowest 8 bytes interpreted as little-endian.\nReturns the lowest 8 bytes interpreted as native-endian.\nReturns the lowest 8 bytes interpreted as native-endian.\nConverts from <code>Self</code> to <code>Self::SolType</code> via either a borrow …\nReturns the number of trailing zeros in the binary …\nMarks trait definitions to ink! as special ink! trait …\nReturns the transferred value for the contract execution.\nReturns the price for the specified amount of gas.\nWrite to the slice in big-endian format.\nZero (additive identity) of this type.\nReturns a new zero-initialized fixed hash.\nReturns a new zero-initialized fixed hash.\nABI spec for encoding/decoding contract calls.\nTrait for ABI-specific decoding.\nTrait for ABI-specific encoding with support for both …\nThe error type that can occur during decoding.\nMarker type for ink! ABI and SCALE encoding.\nink! ABI spec (uses Parity’s SCALE codec for …\nMarker type for Solidity ABI.\nSolidity ABI encoding.\nDecodes the data from a buffer using the provided ABI.\nEncodes the data into a fixed-size buffer, returning the …\nEncodes the data into a dynamically resizing vector.\nEncodes the value as a topic (i.e. an indexed event …\nEncodes the data into a new vector.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe call builder type.\nUsed to refer to the generated contract call builder.\nUsed to check if <code>T</code> is allowed as ink! input parameter type.\nUsed to check if <code>T</code> is allowed as ink! input parameter type.\nUsed to check if <code>T</code> is allowed as ink! output parameter …\nUsed to check if <code>T</code> is allowed as ink! output parameter …\nSimplifies interaction with the host environment via <code>self</code>.\nThe access wrapper.\nThe access wrapper.\nThe call forwarder type.\nTrait used as bound for the outputs of ink! trait …\nThe message builder type.\nSimplifies interaction with the host environment via <code>Self</code>.\nThe global call builder type for an ink! trait definition.\nImplemented by the global trait info provider.\nImplemented by call builders of smart contracts.\nAccess the trait message builder implementation.\nUsed as <code>payable</code> property guard for ink! trait messages.\nUsed as <code>selector</code> property guard for ink! trait messages.\nThe generated contract call builder type.\nBuilds up the <code>&amp;self</code> call.\nBuilds up the <code>&amp;mut self</code> call.\nReturns a shared reference to the global call builder type.\nReturns an exclusive reference to the global call builder …\nReturns <code>Ok</code> if the caller did not transfer additional value …\nAccesses the host environment with <code>self.env()</code> syntax.\nAccesses the host environment with <code>Self::env()</code> syntax.\nForwards the <code>&amp;self</code> call.\nForwards the <code>&amp;mut self</code> call.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUtility types and definitions used by the ink! codegen.\nCompile-time Keccak-256 hash computation.\nCompile-time Solidity selector computation.\nCan be used to check equality of types.\nCompile-time <code>concat!</code>-like macro that accepts <code>const</code> …\nCompile-time <code>format!</code>-like macro that returns <code>&amp;&#39;static str</code>.\nTakes a generic type as input and just consumes it while …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCreates a new const instance.\nThe ABI spec for the decoding the message call.\nThe ABI spec for the decoding the constructor call.\nThe closure that can be used to dispatch into the …\nThe closure that can be used to dispatch into the …\nGuards against using invalid contract initializer types.\nStores the actual value of the constructor return type.\nGenerated type used to decode all dispatchable ink! …\nGenerated type used to decode all dispatchable ink! …\nStores the name of the ink! smart contract.\nFailed to read execution input for the dispatchable.\nThe closure for decoding message input.\nThe closure for decoding constructor input.\nDecodes an ink! dispatch input into a known selector and …\nAn error that can occur during dispatch of ink! …\nStores various information of the respective dispatchable …\nStores various information of the respective dispatchable …\nThe type of the error returned from the constructor. …\nThe error type of the constructor return type.\nStarts the execution of the respective ink! message or …\nThe unique id of the ink! trait definition.\nTrue if the constructor returns a <code>Result</code>.\nIs <code>true</code> if <code>Self</code> is <code>Result&lt;C, E&gt;</code>.\nReflects the input types of the dispatchable ink! message.\nReflects the input types of the dispatchable ink! …\nFailed to decode the parameters for the selected …\nFailed to decode into a valid dispatch selector.\nThe label of the dispatchable ink! message.\nThe label of the dispatchable ink! constructor.\nYields <code>true</code> if the dispatchable ink! message mutates the …\nThe name of the ink! smart contract.\nThe name of the ink! trait.\nReflects the output type of the dispatchable ink! message.\nReflects the output type of the dispatchable ink! …\nThe module path of the ink! trait definition.\nYields <code>true</code> if the dispatchable ink! message is payable.\nYields <code>true</code> if the dispatchable ink! constructor is …\nIs <code>true</code> if the ink! trait message has been annotated with …\nInvalidly paid an unpayable dispatchable.\nclosure for returning per encoding todo: docs\nThe closure for returning return data.\nThe selector of the dispatchable ink! message.\nThe selector (if any) of the dispatchable ink! constructor.\nThe unique selector of the ink! trait message.\nThe ink! storage struct type.\nThe ink! storage struct type.\nType that is guaranteed by ink! to implement all ink! …\nCaptures info about an ink! trait definition.\nStores information for every ink! trait message of an ink! …\nThe ink! smart contract message decoder type.\nThe ink! smart contract constructor decoder type.\nThe decoded selector is not known to the dispatch decoder.\nConverts the return value into a <code>Result</code> instance.\ntodo: docs\nExecutes the ink! smart contract message or constructor.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nStores the actual value of the constructor return type.\nEquivalent Solidity ABI type from <code>alloy_sol_types</code>.\nEquivalent Solidity ABI type from <code>alloy_sol_types</code>.\nNewtype wrapper for Solidity ABI encoding a byte slice …\nAn encodable representation of the default value for this …\nA general decoding error.\nNewtype wrapper for Solidity ABI encoding/decoding <code>Vec&lt;u8&gt;</code> …\nSolidity ABI encoding/decoding error.\nNewtype wrapper for Solidity ABI encoding/decoding <code>[u8; N]</code> …\nTried to decode revert/error data into a non-Result type.\nName of equivalent Solidity ABI type.\nName of equivalent Solidity ABI type.\nName of equivalent Solidity ABI type.\nName of equivalent Solidity ABI type.\nName of equivalent Solidity ABI type.\nName of equivalent Solidity ABI type.\nMaps an arbitrary Rust/ink! type to a Solidity ABI type …\nMaps an arbitrary Rust/ink! type to a Solidity ABI type …\nSolidity ABI decode error data (if possible).\nSolidity ABI encode as error data.\nSolidity ABI decode from parameter data (e.g. function, …\nSolidity ABI encode as a parameter sequence (e.g. …\nSolidity ABI decode return data.\nError representing reason for failing to decode Solidity …\nSolidity ABI encode return data.\nSolidity ABI encode this type as a topic (i.e. an indexed …\nEquivalent Solidity ABI type representation.\nEquivalent Solidity ABI type representation.\nEquivalent Solidity ABI type representation.\nEquivalent Solidity ABI type representation.\nA Rust/ink! equivalent of a Solidity ABI type that …\nA Rust/ink! equivalent of a Solidity ABI type that …\nSolidity ABI decode error data into this type.\nSolidity ABI decode parameter data into this type.\nSolidity ABI decode return data into this type.\nSolidity ABI decode into this type.\nSolidity ABI decode into this type.\nSolidity ABI decode the given data as a parameter sequence.\n<code>Self::topic_preimage</code> equivalent for the default value …\n<code>Self::topic_preimage_size</code> equivalent for the default value …\nDetokenizes this type’s value from the given token.\nSolidity ABI encode the value into Solidity error data.\nSolidity ABI encode the value as a parameter sequence.\nSolidity ABI encode this type as return data.\nSolidity ABI encode the value.\nSolidity ABI encode the value.\nSolidity ABI encode the given value as a parameter …\nSolidity ABI encode the value as a topic (i.e. an indexed …\nSolidity ABI encode the value as a topic (i.e. an indexed …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nConverts a reference to <code>[u8; N]</code> into a reference to …\nGet a reference to the inner from the outer.\nConverts a reference to <code>Vec&lt;u8&gt;</code> into a reference to …\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nConverts to <code>Self</code> from <code>Self::SolType</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs new empty <code>DynBytes</code> without allocating.\nConverts from <code>Self</code> to <code>Self::SolType</code> via either a borrow …\nTokenizes the given value into a <code>Self::AlloyType</code> token.\nEncode this type as input bytes for the hasher, when this …\nSize in bytes of the <code>Self::topic_preimage</code> encoding of this …\nA simple wrapper around a type to store it in a separate …\nA mapping of key-value pairs directly into contract …\nA vector of values (elements) directly on contract storage.\nDelete all elements from storage.\nClears the value of the element at <code>index</code>. It doesn’t …\nChecks if a value is stored at the given <code>key</code> in the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet the <code>value</code> at <code>key</code> from the contract storage.\nAccess an element at given <code>index</code>.\nReads the <code>value</code> from the contract storage, if it exists.\nReads the <code>value</code> from the contract storage.\nInsert the given <code>value</code> to the contract storage.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the vector contains no elements.\nReturns the number of elements in the vector, also …\nCreates a new empty <code>Mapping</code>.\nCreates a new empty <code>StorageVec</code>.\nCreates a new empty <code>Lazy</code>.\nGet a copy of the last element without removing it from …\nClears the last element from the storage and returns it. …\nAppends an element to the back of the vector.\nClears the value at <code>key</code> from storage.\nSet the <code>value</code> at given <code>index</code>.\nWrites the given <code>value</code> to the contract storage.\nGet the size in bytes of a value stored at <code>key</code> in the …\nRemoves the <code>value</code> at <code>key</code>, returning the previous <code>value</code> at …\nTry to get the <code>value</code> at the given <code>key</code>.\nTry to access an element at given <code>index</code>.\nTry to read the <code>value</code> from the contract storage.\nTry to insert the given <code>value</code> into the mapping under given …\nTry to get a copy of the last element without removing it …\nTry to clear and return the last element from storage. …\nTry to append an element to the back of the vector.\nTry to set the <code>value</code> at given <code>index</code>.\nTry to set the given <code>value</code> to the contract storage.\nTry to take the <code>value</code> at the given <code>key</code>. On success, this …\nAuto key type means that the storage key should be …\nAutomatically returns the type that should be used for …\nStorage key of the type.\nManual key type specifies the storage key.\nTrait for describing types that can be read and written to …\nThe storage key that the type prefers. It can be …\nResolver key type selects between preferred key and …\nTrait for representing types which can be read and written …\nDerives <code>ink::storage</code>’s <code>Storable</code> trait for the given …\nDescribes the type that should be used for storing the …\nDerives <code>ink::storage</code>’s <code>StorableHint</code> trait for the given …\nHolds storage key for the type.\nDerives <code>ink::storage</code>’s <code>StorageKey</code> trait for the given …\nImplemented by types that have a storage layout.\nDerives <code>ink::storage</code>’s <code>StorageLayout</code> trait for the given …\nStorable type with storage key inside.\nStorable type with storage key inside.\nAttempt to deserialize the value from input.\nDecode and consume all the given input data.\nConvert self to a slice and append it to the destination.\nThe exact number of bytes this type consumes in the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the storage key.\nReturns the static storage layout of <code>Self</code>.")