searchState.loadedDescShard("ink_macro", 0, "Derives an implementation of the [<code>ink::Event</code>] trait for …\nDerives the [<code>ink::EventMetadata</code>] trait for the given <code>struct</code>…\nDerives an implementation of <code>ink::SolDecode</code> for the given …\nDerives an implementation of <code>ink::SolEncode</code> for the given …\nDerives an implementation of <code>ink::sol::SolErrorDecode</code> for …\nDerives an implementation of <code>ink::sol::SolErrorEncode</code> for …\nDerives <code>ink::storage</code>’s <code>Storable</code> trait for the given …\nDerives <code>ink::storage</code>’s <code>StorableHint</code> trait for the given …\nDerives <code>ink::storage</code>’s <code>StorageKey</code> trait for the given …\nDerives <code>ink::storage</code>’s <code>StorageLayout</code> trait for the given …\nComputes and expands into the BLAKE2b 256-bit hash of the …\nDefines the interface for a chain extension.\nEntry point for writing ink! smart contracts.\nImplements the necessary traits for a <code>struct</code> to be emitted …\nDerive the re-exported traits <code>ink::scale::Encode</code>, …\nComputes the ink! selector of the string and expands into …\nComputes the ink! selector of the string and expands into …\nPrepares the type to be fully compatible and usable with …\nDefines a unit test that makes use of ink!’s off-chain …\nMarks trait definitions to ink! as special ink! trait …")