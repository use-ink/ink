searchState.loadedDescShard("ink_env", 0, "The <code>ink_env</code> utilities used to interoperate with the …\nAllow the callee to reenter into the current contract.\nThe account id type.\ntodo remove A trait to enforce that a type should be an …\nThe capacity of the static buffer. Usually set to 16 kB. …\nThe default balance type.\nThe type of balances.\nThe default block number type.\nThe type of block number.\nThe static buffer used during ABI encoding or ABI decoding …\nThe little-endian bytes representation.\nIdentical to <code>Self::FORWARD_INPUT</code> but without consuming the …\nFlags used to change the behaviour of <code>seal_call</code> and …\nThe call dispatched by <code>call_runtime</code> was executed but …\nThe called function ran to completion but decided to …\nThe called function trapped and has its state changes …\nThe chain extension for the environment.\nStores the used host environment type of the ink! smart …\nRefers to the generated ink! smart contract reference type.\nRefers back to the original contract from the generated …\nFailed to read execution input for the dispatchable.\nError upon decoding an encoded value.\nDecodes an ink! dispatch input into a known selector and …\nError upon decoding with the Solidity ABI encoding.\nThe fundamental types of the default configuration.\nAn error that can occur during dispatch of ink! …\nContract instantiation failed because the address already …\nECDSA public key recovery failed. Most probably wrong …\nThe environment type.\nThe environmental types usable by contracts defined with …\nContains the error value\nErrors that can be encountered upon environmental …\nImplemented by event types to guide the event topic …\nTODO comment\nForward the input of current function to the callee.\nAllows to instantiate a type from its little-endian bytes …\nThe default gas type.\nThe type of hash.\nFailed to decode the parameters for the selected …\nFailed to decode into a valid dispatch selector.\nThe passed key does not exist in storage.\nThe maximum number of supported event topics provided by …\nPlaceholder for chains that have no defined chain …\nAn error that can only occur in the off-chain environment.\nContains the success value\nThe subcall ran out of weight or storage deposit.\nInvalidly paid an unpayable dispatchable.\nIndicates that the callee is restricted from modifying the …\nIf this bit is set all changes made by the contract …\nType state indicating how many event topics are to be …\nA result of environmental operations.\nThe error returned by the contract.\nEvery error that can be returned to a contract when it …\nFlags used by a contract to customize exit behaviour.\nThe unique signature topic of the event. <code>None</code> for …\nsr25519 signature verification failed.\nAPI call successful.\nDo not return from the call but rather return the result …\nThe default timestamp type.\nThe type of a timestamp.\nTransfer failed for other not further specified reason. …\nThe generated contract reference type.\nThe original contract type.\nReturns if an unknown error was received from the host …\nThe decoded selector is not known to the dispatch decoder.\nThe <code>xcm_execute</code> call failed.\nThe <code>xcm_send</code> call failed.\nReturns the account ID of the executed contract.\nReturns the address of the executed contract.\nReturns the set containing all flags.\nReturns the set containing all flags.\nReturns the balance of the executed contract.\nReturns the intersection between the two sets of flags.\nReturns the intersection between the two sets of flags.\nDisables all flags disabled in the set.\nDisables all flags disabled in the set.\nReturns the union of the two sets of flags.\nReturns the union of the two sets of flags.\nAdds the set of flags.\nAdds the set of flags.\nReturns the raw value of the flags currently stored.\nReturns the raw value of the flags currently stored.\nReturns the left flags, but with all the right flags …\nReturns the left flags, but with all the right flags …\nToggles the set of flags.\nToggles the set of flags.\nReturns the current block number.\nReturns the current block timestamp.\nUtilities to call or instantiate contracts on the chain.\nTries to trigger a runtime dispatchable, i.e. an extrinsic …\nReturns the address of the caller of the executed contract.\nChecks whether the caller of the current contract is the …\nChecks whether the caller of the current contract is root.\nDefinitions and utilities for calling chain extension …\nClears the contract’s storage entry under the given …\nRetrieves the code hash of the contract at the specified …\nReturns the complement of this set of flags.\nReturns the complement of this set of flags.\nReturns <code>true</code> if all of the flags in <code>other</code> are contained …\nReturns <code>true</code> if all of the flags in <code>other</code> are contained …\nChecks whether there is a value stored under the given …\ntodo: docs\nReturns the execution input to the executed contract and …\nReturns the difference between the flags in <code>self</code> and <code>other</code>.\nReturns the difference between the flags in <code>self</code> and <code>other</code>.\nRecovers the compressed ECDSA public key for given …\nReturns an Ethereum address from the ECDSA compressed …\nEmits an event with the given event data.\nReturns an empty set of flags.\nReturns an empty set of flags.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from underlying bit representation, unless that …\nConvert from underlying bit representation, unless that …\nConvert from underlying bit representation, dropping any …\nConvert from underlying bit representation, dropping any …\nConvert from underlying bit representation, preserving all …\nConvert from underlying bit representation, preserving all …\nCreate a new instance from the little-endian bytes …\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nReturns the value stored under the given storage key in …\nProvides type definitions and traits for the built-in …\nConducts the crypto hash of the given input and stores the …\nConducts the crypto hash of the given encoded input and …\nInserts the specified flags in-place.\nInserts the specified flags in-place.\nInstantiates another contract.\nReturns the intersection between the flags in <code>self</code> and …\nReturns the intersection between the flags in <code>self</code> and …\nReturns <code>true</code> if there are flags common to both <code>self</code> and …\nReturns <code>true</code> if there are flags common to both <code>self</code> and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInvokes a contract message and returns its result.\nInvokes a contract message via delegate call and returns …\nReturns <code>true</code> if all flags are currently set.\nReturns <code>true</code> if all flags are currently set.\nChecks whether the specified account is a contract.\nReturns <code>true</code> if no flags are currently stored.\nReturns <code>true</code> if no flags are currently stored.\nReturns the minimum balance that is required for creating …\nReturns the complement of this set of flags.\nReturns the complement of this set of flags.\nRetrieves the code hash of the currently executing …\nPrepend contract message call with value transfer. Used …\nDefinitions and utilities for ink! smart contract static …\nRemoves the specified flags in-place.\nRemoves the specified flags in-place.\nReturns the value back to the caller of the executed …\nReturns the <em>Solidity ABI encoded</em> value back to the caller …\nInserts or removes the specified flags depending on the …\nInserts or removes the specified flags depending on the …\nReplace the contract code at the specified address with …\nWrites the value to the contract storage under the given …\nVerifies a sr25519 signature.\nReturns the set difference of the two sets of flags.\nReturns the set difference of the two sets of flags.\nDisables all flags enabled in the set.\nDisables all flags enabled in the set.\nReturns the symmetric difference between the flags in <code>self</code> …\nReturns the symmetric difference between the flags in <code>self</code> …\nRemoves the <code>value</code> at <code>key</code>, returning the previous <code>value</code> at …\nTerminates the existence of the currently executed smart …\nOperations on the off-chain testing environment.\nToggles the specified flags in-place.\nToggles the specified flags in-place.\nGuides event topic serialization using the given topics …\nTransfers value from the contract to the destination …\nReturns the transferred value for the contract execution.\nReturns the union of between the flags in <code>self</code> and <code>other</code>.\nReturns the union of between the flags in <code>self</code> and <code>other</code>.\nReturns the price for the specified amount of gas.\nExecute an XCM message locally, using the contract’s …\nSend an XCM message, using the contract’s address as the …\nThe default call type for cross-contract calls, for …\nBuilds up a cross contract call.\nThe final parameters to the cross-contract call.\nRepresents any type that can be returned from an <code>ink!</code> …\nBuilds up contract instantiations.\nBuilds up contract instantiations.\nThe <code>delegatecall</code> call type. Performs a call with the given …\nThe error type of the constructor return type.\nThe type of the error that can be returned during …\nThe input data and the expected return type of a contract …\nThe input data for a smart contract execution.\nImplemented in different environments to perform contract …\nContracts that can be constructed from an <code>AccountId</code>.\nIs <code>true</code> if <code>Self</code> is <code>Result&lt;C, E&gt;</code>.\nIs <code>true</code> if <code>Self</code> is <code>Result&lt;C, E&gt;</code>.\nDefines the limit params for the new <code>ext::instantiate</code> host …\nThe actual return type of the constructor.\nThe function selector.\nSets the <code>address</code> to perform a delegate call with.\nReturns the contract address which we use to perform a …\nSets the <code>address</code> to perform a delegate call with.\nReturns a new <code>CallBuilder</code> to build up the parameters to a …\nReturns a new <code>CallBuilder</code> to build up the parameters to a …\nReturns a new <code>CreateBuilder</code> to build up the parameters to …\nPrepares the <code>CallBuilder</code> for a cross-contract <code>Call</code> to the …\nReturns the call flags.\nReturns the call flags.\nSets the <code>call_flags</code> for the current cross-contract call.\nSets the <code>CallFlags</code> to perform a delegate call with.\nThe type of the call.\nReturns the contract address of the called contract …\nThe code hash of the contract.\nSets the used code hash for the contract instantiation.\nPrepares the <code>CallBuilder</code> for a cross-contract <code>DelegateCall</code>.\nReturns the <code>deposit_limit</code> which we use to perform a …\nEncodes the execution input into a dynamic vector by …\nEncodes the execution input into a static buffer by …\nThe endowment for the instantiated contract.\nSets the value transferred upon the execution of the call.\nConstruct an error value of the <code>Output</code> type.\nConstruct an error value of the <code>Output</code> type.\nPerform the contract execution with the given input data, …\nPerform the execution of the contract with the given …\nReturns the execution input.\nSets the execution input to the given value.\nThe raw encoded input data.\nSets the value transferred upon the execution of the call.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates the contract instance from the account ID of the …\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nThe input data for initiating a contract execution.\ntodo Instantiates the contract and returns its account ID …\ntodo check comment Instantiates the contract and returns …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInvoke the contract using Delegate Call semantics with the …\nInvokes the contract with the given built-up call …\nInvokes the cross-chain function call using Delegate Call …\nInvokes the cross-chain function call and returns the …\nInvokes the cross-chain function call using Delegate Call …\nInvokes the cross-chain function call.\nConstruct a new contract execution with the given input …\nReturns a clean builder for <code>Call</code>.\nReturns a clean builder for <code>DelegateCall</code>\nCreates a new execution input with the given selector.\nCreates a selector directly from 4 bytes.\nConstruct a success value of the <code>Output</code> type.\nThe type of the expected return value of the contract …\nFinalizes the call builder to call a function.\nFinalizes the call builder to call a function.\nFinalizes the call builder to call a function.\nFinalizes the call builder to call a function.\nFinalizes the <code>CreateBuilder</code>, allowing it to instantiate a …\nReturns the <code>proof_size_limit</code> which we use to perform a …\nReturns the chosen proof size limit for the called …\nSets the <code>proof_size_limit</code> part of the weight limit for the …\nGets the <code>proof_size_limit</code> part of the weight limit for the …\nSets the <code>proof_size_limit</code> part of the weight limit for the …\nPushes an argument to the execution input.\nPushes an argument to the execution input.\nReturns the <code>ref_time_limit</code> which we use to perform a …\nReturns the chosen ref time limit for the called contract …\nSets the <code>ref_time_limit</code> part of the weight limit for the …\nGets the <code>ref_time_limit</code> part of the weight limit for the …\nSets the <code>ref_time_limit</code> part of the weight limit for the …\nSets the type of the returned value upon the execution of …\nSets the type of the returned value upon the execution of …\nThe salt for determining the hash for the contract account …\nSets the salt used for the execution of the call.\nType states that tell what state of a instantiation …\nReturns the chosen storage deposit limit for the called …\nSets the <code>storage_deposit_limit</code> for the current …\nGets the <code>storage_deposit_limit</code> for the contract …\nSets the <code>storage_deposit_limit</code> for the contract …\nReturns the underlying bytes of the selector.\nReturns the transferred value for the called contract.\nSets the <code>transferred_value</code> for the current cross-contract …\nInstantiates the contract and returns its account ID back …\ntodo check comment Instantiates the contract and returns …\nInvoke the contract using Delegate Call semantics with the …\nInvokes the contract with the given built-up call …\nInvokes the cross-chain function call and returns the …\nInvokes the cross-chain function call.\nInvokes the cross-chain function call using Delegate Call …\nInvokes the cross-chain function call using Delegate Call …\nModify the selector.\nModify the selector.\nUtility types for the cross-contract calling API.\nMinor simplification of an argument list with a head and …\nA single argument and its reference to a known value.\nAn argument list.\nThe end of an argument list.\nA trait for decoding the output of a message based on …\nAn empty argument list.\nThe output type of the <code>unwrap_or_else</code> operation.\nRepresents a return type.\nA parameter that has been set to some value.\nA parameter that has not been set, yet.\nImplemented by <code>Set</code> and <code>Unset</code> in order to unwrap their …\nDecodes the output of a message call, requiring the output …\nCreates a new empty argument list.\nCreates a new empty argument list.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPushes the first argument to the empty argument list.\nPushes the first argument to the empty argument list.\nPushes another argument to the argument list.\nReturns the set value or evaluates the given closure.\nReturns the set value.\nA concrete instance of a chain extension method.\nThe <code>E</code> type of the <code>Result&lt;T, E&gt;</code>.\nImplemented by error codes in order to construct them from …\nExtract <code>Ok</code> and <code>Err</code> variants from <code>Result</code> type.\nThe <code>T</code> type of the <code>Result&lt;T, E&gt;</code>.\nCreates a new chain extension method instance.\nCalls the chain extension method for case 2.B described …\nCalls the chain extension method for case 1.A described …\nCalls the chain extension method for case 2.A described …\nCalls the chain extension method for case 1.B described …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nReturns <code>Ok</code> if the status code for the called chain …\nMakes the chain extension method call handle the returned …\nMakes the chain extension method call assume that the …\nSets the input types of the chain extension method call to …\nCalls <code>U::from(self)</code>.\nSets the output type, <code>O</code>, of the chain extension method …\nType states of the chain extension method instance.\nType state meaning that the chain extension method uses …\nType state meaning that the chain extension method ignores …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe BLAKE-2 crypto hash with 128-bit output.\nThe BLAKE-2 crypto hash with 256-bit output.\nTypes that are usable as built-in cryptographic hashes.\nThe output type of built-in cryptographic hash functions.\nThe KECCAK crypto hash with 256-bit output.\nThe SHA-2 crypto hash with 256-bit output.\nThe output type of the crypto hash.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nHashes the given raw byte input and copies the result into …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTrait for ABI-specific decoding.\nTrait for ABI-specific encoding with support for both …\nThe closure that can be used to dispatch into the …\nThe closure that can be used to dispatch into the …\nGuards against using invalid contract initializer types.\nStores the actual value of the constructor return type.\nGenerated type used to decode all dispatchable ink! …\nGenerated type used to decode all dispatchable ink! …\nStores the name of the ink! smart contract.\nFailed to read execution input for the dispatchable.\nclosure for decoding\nDecodes an ink! dispatch input into a known selector and …\nAn error that can occur during dispatch of ink! …\nStores various information of the respective dispatchable …\nStores various information of the respective dispatchable …\nThe encoding of input and output data for the message\ntodo: comment\nThe type of the error returned from the constructor. …\nThe error type that can occur during decoding.\nThe error type of the constructor return type.\nStarts the execution of the respective ink! message or …\nThe unique id of the ink! trait definition.\nTrue if the constructor returns a <code>Result</code>.\nIs <code>true</code> if <code>Self</code> is <code>Result&lt;C, E&gt;</code>.\nReflects the input types of the dispatchable ink! message.\nReflects the input types of the dispatchable ink! …\nFailed to decode the parameters for the selected …\nFailed to decode into a valid dispatch selector.\nThe label of the dispatchable ink! message.\nThe label of the dispatchable ink! constructor.\nYields <code>true</code> if the dispatchable ink! message mutates the …\nThe name of the ink! smart contract.\nThe name of the ink! trait.\nReflects the output type of the dispatchable ink! message.\nReflects the output type of the dispatchable ink! …\nThe module path of the ink! trait definition.\nYields <code>true</code> if the dispatchable ink! message is payable.\nYields <code>true</code> if the dispatchable ink! constructor is …\nIs <code>true</code> if the ink! trait message has been annotated with …\nInvalidly paid an unpayable dispatchable.\nclosure for returning per encoding todo: docs\nThe selectors of the dispatchable ink! message.\nThe selectors of the dispatchable ink! constructor.\nThe unique selector of the ink! trait message.\nMarker type for SCALE encoding. Used with <code>AbiEncodeWith</code>, …\nMarker type for Solidity ABI encoding. Used with …\nThe ink! storage struct type.\nThe ink! storage struct type.\nType that is guaranteed by ink! to implement all ink! …\nCaptures info about an ink! trait definition.\nStores information for every ink! trait message of an ink! …\nThe ink! smart contract message decoder type.\nThe ink! smart contract constructor decoder type.\nThe decoded selector is not known to the dispatch decoder.\nConverts the return value into a <code>Result</code> instance.\ntodo: docs\nDecodes the data from a buffer using the provided ABI.\nEncodes the data into a fixed-size buffer, returning the …\nEncodes the data into a dynamically resizing vector.\nExecutes the ink! smart contract message or constructor.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nStores the actual value of the constructor return type.\nThe raw ABI respecting input data to a call.\nTypes implementing this trait can be used as chain …\nThe chain specification.\nThe default accounts.\nRecord for an emitted event.\nAdvances the chain by a single block.\nThe predefined <code>ALICE</code> account holding substantial amounts …\nTests if a contract terminates successfully after …\nThe targeted block time.\nThe predefined <code>BOB</code> account holding some amounts of value.\nCalls the chain extension with the given input.\nGets the currently set callee.\nThe predefined <code>CHARLIE</code> account holding some amounts of …\nReturns the amount of storage cells used by the contract …\nRecorded encoding of the emitted event.\nReturns the default accounts for testing purposes: Alice, …\nThe predefined <code>DJANGO</code> account holding no value.\nThe predefined <code>EVE</code> account holding no value.\nThe static ID of the chain extension.\nThe predefined <code>FRANK</code> account holding no value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nThe current gas price.\nReturns the balance of the account.\nReturns the total number of reads and writes of the …\nRetrieves the value stored by <code>return_value()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a boolean to indicate whether an account is a …\nThe minimum value an account of the chain must have (i.e. …\nCreates new call ABI data for the given selector.\nReturns the underlying bytes of the encoded input …\nPrepend contract message call with value transfer. Used …\nPushes the given argument onto the call ABI data in …\nReturns the recorded emitted events in order.\nRegisters a new chain extension.\nRuns the given closure test function with the default …\nReturns the selector of <code>self</code>.\nSets the balance of the account to the given balance.\nSets the block number for the next <code>advance_block</code> …\nSets the block timestamp for the next <code>advance_block</code> …\nSets the callee for the next call.\nSets a caller for the next call.\nSet to true to disable clearing storage\nSets an account as a contract\nSets the value transferred from the caller to the callee …\nReturns the underlying byte representation.\nRecorded topics of the emitted event.\nTransfers value from the caller account to the contract.\nGets a pseudo code hash for a contract ref.\nThe default environment <code>AccountId</code> type.\nThe account id type.\ntodo remove A trait to enforce that a type should be an …\nA Solidity compatible <code>address</code> type.\nApplying an extrinsic.\nThe default balance type.\nSpecifies a maximum allowable balance for a deposit.\nThe type of balances.\nThe default block number type.\nThe type of block number.\nThe little-endian bytes representation.\nThe clear hash.\nThe chain extension for the environment.\nThe equivalent of <code>Zero</code> for hashes.\nThe fundamental types of the default configuration.\nThe environmental types usable by contracts defined with …\nThe default event record type.\nTODO comment\nFinalizing the block.\nAllows to instantiate a type from its little-endian bytes …\nThe default gas type.\nThe default environment <code>Hash</code> type.\nThe type of hash.\nInitializing the block.\nThe maximum number of supported event topics provided by …\nPlaceholder for chains that have no defined chain …\nThe type of origins supported by <code>pallet-revive</code>.\nA phase of a block’s execution.\nThe default timestamp type.\nThe type of a timestamp.\nAllows bypassing all balance transfer checks.\nThe event itself.\nThe event itself.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new instance from the little-endian bytes …\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the hash is clear.\nThe phase of the block it happened in.\nThe phase of the block it happened in.\nThe list of the topics this event has.\nThe list of the topics this event has.")