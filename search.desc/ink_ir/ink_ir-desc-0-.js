searchState.loadedDescShard("ink_ir", 0, "The ink! intermediate representation (IR) and abstractions.\nABI spec for encoding/decoding contract calls.\nSupport both ink! and Solidity ABI specs for each contract …\nComputes the BLAKE2b-256 bit hash of a string or byte …\nAn ink! callable.\nThe kind of externally callable smart contract entity.\nWrapper for a callable that adds its composed selector.\nAn ink! chain extension.\nAn ink! chain extension method.\nThe ink! configuration.\nAn ink! constructor definition.\nAn ink! constructor externally callable.\nA <code>#[ink(constructor)]</code> marked inherent function.\nAn ink! contract definition consisting of the ink! …\nA checked ink! event with its configuration.\nAn ink! event definition.\nThe unique ID of an chain extension.\nUsed to convert literal values into their hex …\nAn ink! implementation block.\nAn item within an ink! implementation block.\nink! ABI spec (the default, uses the SCALE codec for …\nThe item is an ink! specific item.\nAn ink! specific item.\nA checked ink! trait definition without its configuration.\nThe ink! test with all required information.\nA checked ink! trait definition without its configuration.\nAn ink! item within an ink! trait definition.\nA checked ink! message of an ink! trait definition.\nIterator over the input parameters of an ink! message or …\nAn extension trait for <code>syn::Attribute</code> in order to query …\nAn item in the root of the ink! module (<code>ir::ItemMod</code>).\nAn ink! implementation block.\nThe ink! module.\nIterator yielding all ink! constructor within a source ink!\nIterator yielding all ink! event definitions within the …\nIterator over all the ink! trait items of an ink! trait …\nIterator yielding all ink! implementation block …\nIterator yielding all ink! messages within a source ink! …\nAn ink! message definition.\nAn ink! message externally callable.\nA <code>#[ink(message)]</code> marked method.\nAn ink! namespace applicable to a trait implementation …\nAny other implementation block item.\nThe receiver of an ink! message.\nThe <code>&amp;self</code> message receiver.\nThe <code>&amp;mut self</code> message receiver.\nThe item is a normal Rust item.\nThe selector of an ink! dispatchable.\nThe selector ID of an ink! dispatchable.\nThe signature topic argument of an event variant.\nSolidity ABI spec.\nAn ink! storage struct definition.\nThe ink! storage struct definition.\nA checked ink! storage item with its configuration.\nThe visibility of an ink! message or constructor.\nReturns all types that were used in the storage …\nReturns if the event is marked as anonymous, if true then …\nReturns the namespace as bytes.\nTypes and abstractions for ink! definitions that require …\nReturns AST.\nReturns the attributes of the storage.\nReturns the Rust attributes of the ink! chain extension.\nReturns the Rust attributes of the ink! chain extension …\nReturns the non-ink! attributes of the ink! storage struct.\nReturns a slice of all non-ink! attributes of the ink! …\nReturns a slice of all non-ink! attributes of the ink! …\nReturns all non-ink! specific attributes of the …\nReturns all non-ink! attributes of the ink! module.\nReturns all non-ink! attributes.\nReturns the attributes of the ink! trait definition.\nComputes the BLAKE-2b 256-bit hash for the given input and …\nReturns a shared reference to the underlying callable.\nNote\nReturns the composed selector of the ink! callable the <code>impl</code>…\nComputes the BLAKE-2 256-bit based selector from the given …\nReturns the configuration of the ink! smart contract.\nReturns the config of the storage.\nReturns the ink! trait definition config.\nReturns data of the storage.\nReturns the environmental types definition if specified. …\nReturns the type of the error code of the chain extension.\nReturns an iterator yielding all event definitions in this …\nReturns the contents of the Rust documentation attribute …\nReturns an iterator yielding all fields of the storage …\nReturns <code>Some</code> if <code>self</code> is an ink! constructor.\nReturns <code>Some</code> if <code>self</code> is an ink! event struct definition.\nReturns <code>Some</code> if <code>self</code> is an ink! implementation block.\nReturns <code>Some</code> if <code>self</code> is an ink! message.\nReturns <code>Some</code> if the ink! trait item is a message.\nReturns <code>Some</code> if <code>self</code> is a not an ink! specific item.\nReturns <code>Some</code> if <code>self</code> is the ink! storage struct definition.\nCreates a <code>syn::Error</code> with the format message and infers the\nCreates a <code>syn::Error</code> with the format message and infers the\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new chain extension ID from the given <code>u16</code>.\nReturns the generics of the storage.\nReturns the generics of the storage struct.\nReturns a list of <code>cfg</code> attributes if any.\nReturns a list of <code>cfg</code> attributes if any.\nReturns a list of <code>cfg</code> attributes if any.\nReturns a list of <code>cfg</code> attributes if any.\nReturns a list of <code>cfg</code> attributes if any.\nReturns a list of <code>cfg</code> attributes as <code>syn::Attribute</code> if any.\nReturns a list of <code>cfg</code> attributes as <code>syn::Attribute</code> if any.\nReturns <code>true</code> if the chain extension method was flagged with\nReturns <code>true</code> if the ink! callable is flagged as a wildcard …\nReturns <code>true</code> if the ink! callable is flagged as a wildcard …\nReturns the underlying selector.\nReturns the 4 bytes that make up the selector as hex …\nConverts the given value into a hex represented literal …\nConverts the given value into a hex represented literal …\nConverts the given value into a hex represented literal …\nConverts the given value into a hex represented literal …\nReturns the unique ID of the chain extension method.\nReturns the identifier of the ink! callable.\nReturns the identifier of the storage.\nReturns the identifier of the ink! chain extension.\nReturns the identifier of the ink! chain extension method.\nReturns the identifier of the storage struct.\nReturns the identifier of the ink! module.\nReturns the Rust identifier of the ink! trait item.\nReturns the Rust identifier of the ink! message.\nReturns the identifier of the ink! trait definition.\nReturns an iterator yielding all ink! implementation …\nReturns the ink! attributes of the ink! trait item.\nReturns all ink! attributes.\nReturns the literal input of the BLAKE-2b hash.\nReturns the literal input of the selector ID.\nReturns an iterator yielding all input parameters of the …\nReturns an iterator over the inputs of the chain extension …\nReturns an iterator over the inputs of the ink! trait …\nReturns the span of the inputs of the ink! callable.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the big-endian <code>u32</code> representation of the selector …\nReturns the underlying raw <code>u16</code> index.\nReturns <code>true</code> if the <code>impl</code> block item is an ink! message.\nReturns <code>true</code> if the ink! callable is flagged as default.\nReturns <code>true</code> if the attribute is a Rust documentation …\nReturns <code>true</code> if the ink! specific item is an event struct …\nReturns <code>true</code> if the ink! specific item is an …\nReturns <code>true</code> if the visibility of the ink! message of …\nReturns <code>true</code> if <code>self</code> is an ink! specific item.\nReturns <code>true</code> if the given <code>syn::Item</code> is eventually an ink! …\nReturns <code>true</code> if the <code>impl</code> block item is an ink! message.\nReturns <code>true</code> if the <code>impl</code> block item is a non ink! specific …\nReturns <code>true</code> if the ink! callable is flagged as payable.\nReturns <code>true</code> if the visibility of the ink! message of …\nReturns <code>true</code> if the receiver is <code>&amp;self</code>.\nReturns <code>true</code> if the receiver is <code>&amp;mut self</code>.\nReturns <code>true</code> if <code>self</code> is a normal Rust item.\nReturns <code>true</code> if the ink! specific item is the storage …\nReturns the event definition .\nReturns the ink! trait item representing the ink! trait …\nThe function which was annotated.\nReturns the parent implementation block of the ink! …\nReturns a slice over the shared references of the items of …\nReturns all (ink! and non-ink! specific) item definitions …\nReturns an iterator yielding the ink! messages of the …\nReturns an iterator yielding the ink! specific items of …\nReturns an iterator yielding the ink! messages of the …\nReturns a slice over all the chain extension methods.\nReturns the kind of the ink! callable.\nReturns a local ID unique to the ink! message with respect …\nReturns a local ID unique to the ink! trait definition of …\nReturns <code>Some</code> if <code>self</code> is an ink! specific item.\nReturns <code>Some</code> if <code>self</code> is an ink! specific item.\nMarker types and definitions.\nReturns the ink! inline module definition.\nReturns <code>true</code> if the ink! message may mutate the contract …\nReturns the namespace of the implementation block if any …\nCreates a new ink! contract from the given ink! …\nReturns <code>Ok</code> if the test matches all requirements for an …\nReturns <code>Ok</code> if the input matches all requirements for an …\nReturns <code>Ok</code> if the trait matches all requirements for an …\nReturns <code>Ok</code> if the input matches all requirements for an …\nCreates a new ink! item trait from the given configuration …\nReturns <code>Ok</code> if the input matches all requirements for an …\nReturns the return type of the ink! constructor if any.\nReturns the return type of the ink! message if any.\nReturns the return type of the ink! message if any.\nReturns the <code>self</code> receiver of the ink! message.\nReturns the <code>self</code> receiver of the ink! trait message.\nReturns salt for storage key.\nReturns the underlying selector.\nReturns the <code>Self</code> type of the implementation block.\nReturns the method signature of the ink! chain extension …\nReturns the original signature of the ink! message.\nReturn manually specified signature topic hash.\nReturns the span of the ink! chain extension.\nReturns the span of the ink! chain extension method.\nReturns the associated span if any.\nReturns the span of the ink! message.\nReturns span of the ink! trait definition.\nReturns a slice over shared references to the statements …\nReturns the storage struct definition for this ink! module.\nReturns the underlying four bytes.\nWe mainly implement this trait for this ink! type to have …\nWe mainly implement this trait for this ink! type to have …\nWe mainly implement this trait for this ink! type to have …\nWe mainly implement this trait for this ink! type to have …\nWe mainly implement this trait for this ink! type to have …\nWe mainly implement this trait for this ink! type to have …\nWe mainly implement this trait for this ink! type to have …\nWe mainly implement this trait for this ink! type to have …\nWe mainly implement this trait for ink! module to have a …\nReturns the trait identifier if this is a trait …\nReturns the trait type path if this is a trait …\nCreates a new ink! chain extension from the given …\nReturns the identifier of the message with an additional …\nReturns the selector of the ink! callable if any has been …\nReturns the visibility of the storage.\nReturns the visibility of the ink! module.\nReturns the visibility of the ink! callable.\nReturn set of attributes that can be passed to call …\nReturns the return type of the message, but wrapped within …\nThe attribute arguments for the configuration of an ink! …\nContent of a compile-time structured attribute.\nA name-value pair within an attribute, like …\nRepresents a value in a meta name-value pair.\nA name-value pair, like <code>feature = &quot;nightly&quot;</code>.\nA path, like <code>message</code>.\nReturns the value of the literal if it is a boolean …\nReturns the literal if it is a boolean literal.\nReturns the literal if it is an integer literal.\nReturns the literal if it is a string literal.\nReturns the path (if the value is a path).\nReturns the value of the literal if it is a string literal.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the meta-item name.\nReturns the <code>NameValue</code> variant (if any).\nReturns the meta-item value (if any).\nUsed as generic parameter for the <code>selector_bytes!</code> macro.\nUsed as generic parameter for the <code>selector_id!</code> macro.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe set of attributes that can be passed to call builder …\nReturn an error to notify about duplicate ink! …\nEnsures that the given visibility is <code>pub</code> and otherwise …\nExtracts <code>cfg</code> attributes from the given set of attributes\nExtracts <code>cfg</code> attributes from the given set of attributes\nReturns the filtered input vector of whitelisted …\nFinds the salt of a struct, enum or union. The salt is any …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns a local ID unique to the ink! trait definition for …\nParses the <code>MetaNameValue</code> argument of <code>keep_attr</code> attribute. …")