searchState.loadedDescShard("ink_primitives", 0, "Utilities in use by ink!.\nThe <code>Result</code> type for ink! constructors.\nFailed to read execution input for the dispatchable.\nContains the error value\nContains the error value\nFixed-size uninterpreted hash type with 20 bytes (160 …\nFixed-size uninterpreted hash type with 32 bytes (256 …\nA key into the smart contract storage.\nContains all rules related to storage key creation.\nAn error emitted by the smart contracting language.\nThe maximal weight in all dimensions.\nMaximum value.\nThe <code>Result</code> type for ink! messages.\nContains the success value\nContains the success value\nLittle-endian large integer type 256-bit unsigned integer.\nAbstractions for ABI representation and encoding/decoding.\nComputes the absolute difference between self and other.\nConstant version of Add for <code>proof_size</code> component with u64.\nConstant version of Add for <code>ref_time</code> component with u64.\nReturns true if all of <code>self</code>’s constituent weights is …\nReturns true if all of <code>self</code>’s constituent weights is …\nReturns true if all of <code>self</code>’s constituent weights is …\nReturns true if all of <code>self</code>’s constituent weights is …\nReturns true if any of <code>self</code>’s constituent weights is …\nReturns true if any of <code>self</code>’s constituent weights is …\nReturns true if any of <code>self</code>’s constituent weights is …\nReturns true if any of <code>self</code>’s constituent weights is …\nReturns true if any of <code>self</code>’s constituent weights is …\nExtracts a byte slice containing the entire fixed hash.\nExtracts a byte slice containing the entire fixed hash.\nExtracts a mutable byte slice containing the entire fixed …\nExtracts a mutable byte slice containing the entire fixed …\nExtracts a reference to the byte array containing the …\nExtracts a reference to the byte array containing the …\nExtracts a reference to the byte array containing the …\nExtracts a reference to the byte array containing the …\nReturns a mutable raw pointer to the value.\nReturns a mutable raw pointer to the value.\nReturns a constant raw pointer to the value.\nReturns a constant raw pointer to the value.\nConversion to u128 with overflow checking\nConversion to u32 with overflow checking\nConversion to u64 with overflow checking\nConversion to usize with overflow checking\nAssign the bytes from the byte slice <code>src</code> to <code>self</code>.\nAssign the bytes from the byte slice <code>src</code> to <code>self</code>.\nReturn if specific bit is set.\nReturn the least number of bits needed to represent the …\nReturn specific byte. Byte 0 is the least significant …\nTry to increase <code>self</code> by <code>amount</code> via checked addition.\nChecked <code>Weight</code> addition. Computes <code>self + rhs</code>, returning …\nChecked addition. Returns <code>None</code> if overflow occurred.\nChecked <code>Weight</code> scalar division. Computes …\nChecked division. Returns <code>None</code> if <code>other == 0</code>.\nCalculates how many <code>other</code> fit into <code>self</code>.\nChecked <code>Weight</code> scalar multiplication. Computes …\nChecked multiplication. Returns <code>None</code> if overflow occurred.\nChecked negation. Returns <code>None</code> unless <code>self == 0</code>.\nChecked exponentiation. Returns <code>None</code> if overflow occurred.\nTry to reduce <code>self</code> by <code>amount</code> via checked subtraction.\nChecked modulus. Returns <code>None</code> if <code>other == 0</code>.\nChecked <code>Weight</code> subtraction. Computes <code>self - rhs</code>, returning …\nChecked subtraction. Returns <code>None</code> if overflow occurred.\nEvaluates the storage key of the field in the structure, …\nConcatenate two <code>Key</code> into one during compilation.\nReturns <code>true</code> if all bits set in <code>b</code> are also set in <code>self</code>.\nReturns <code>true</code> if all bits set in <code>b</code> are also set in <code>self</code>.\nConstant version of Div with u64.\nReturns a pair <code>(self / other, self % other)</code>.\nCreate <code>10**n</code> as this type.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a hash type from the given reference to the …\nConstructs a hash type from the given reference to the …\nConstructs a hash type from the given bytes array of fixed …\nConstructs a hash type from the given reference to the …\nConstructs a hash type from the given reference to the …\nConstructs a hash type from the given bytes array of fixed …\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct <code>Weight</code> from the same weight for all parts.\nConverts from big endian representation bytes in memory.\nReturns the storage key from the supplied <code>bytes</code>.\nConvert from a decimal string.\nConverts from little endian representation bytes in memory.\nCreates a new hash type from the given <code>u64</code> value.\nCreates a new hash type from the given <code>u64</code> value.\nCreates a new hash type from the given <code>u64</code> value.\nCreates a new hash type from the given <code>u64</code> value.\nCreates a new hash type from the given <code>u64</code> value.\nCreates a new hash type from the given <code>u64</code> value.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nConstruct <code>Weight</code> from weight parts, namely reference time …\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCreate a new fixed-hash from the given slice <code>src</code>.\nCreate a new fixed-hash from the given slice <code>src</code>.\nReturn the storage key from the supplied <code>str</code>.\nCreates a hash type instance from the given string.\nCreates a hash type instance from the given string.\nConverts a string slice in a given base to an integer. …\nMultiplies two 256-bit integers to produce full 512-bit …\nCompute the highest <code>n</code> such that <code>n * n &lt;= self</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether this is zero.\nReturns <code>true</code> if no bits are set.\nReturns <code>true</code> if no bits are set.\nReturns the number of leading zeros in the binary …\nReturns the size of this hash in bytes.\nReturns the size of this hash in bytes.\nLow 2 words (u128)\nConversion to u32\nLow word (u64)\nGet the aggressive max of <code>self</code> and <code>other</code> weight.\nThe maximum value which can be inhabited by this type.\nGet the conservative min of <code>self</code> and <code>other</code> weight.\nConstant version of Mul with u64.\nOne (multiplicative identity) of this type.\nAddition which overflows and returns a flag if it does.\nMultiply with overflow, returning a flag if it does.\nNegation with overflow.\nFast exponentiation by squaring. Returns result and …\nSubtraction which underflows and returns a flag if it does.\nFast exponentiation by squaring …\nReturn the storage size part of the weight.\nReturn a mutable reference to the storage size part of the …\nCreate a new hash with cryptographically random content.\nCreate a new hash with cryptographically random content.\nCreate a new hash with cryptographically random content …\nCreate a new hash with cryptographically random content …\nAssign <code>self</code> to a cryptographically random value.\nAssign <code>self</code> to a cryptographically random value.\nAssign <code>self</code> to a cryptographically random value using the …\nAssign <code>self</code> to a cryptographically random value using the …\nReturn the reference time part of the weight.\nReturn a mutable reference to the reference time part of …\nDefinitions and utilities for ink! smart contract static …\nReturns a new fixed hash where all bits are set to the …\nReturns a new fixed hash where all bits are set to the …\nIncrement <code>Weight</code> by <code>amount</code> via saturating addition.\nSaturating <code>Weight</code> addition. Computes <code>self + rhs</code>, …\nAddition which saturates at the maximum value (Self::MAX).\nSaturating <code>Weight</code> scalar division. Computes …\nSaturating <code>Weight</code> scalar multiplication. Computes …\nMultiplication which saturates at the maximum value..\nSaturating <code>Weight</code> scalar exponentiation. Computes …\nReduce <code>Weight</code> by <code>amount</code> via saturating subtraction.\nSaturating <code>Weight</code> subtraction. Computes <code>self - rhs</code>, …\nSubtraction which saturates at zero.\nSet the storage size part of the weight.\nSet the reference time part of the weight.\nAbstractions for implementing Solidity ABI …\nConstant version of Sub for <code>proof_size</code> component with u64.\nConstant version of Sub for <code>ref_time</code> component with u64.\nConvert to big-endian bytes.\nReturns the inner bytes array.\nReturns the inner bytes array.\nConvert to little-endian bytes.\nReturns the lowest 8 bytes interpreted as big-endian.\nReturns the lowest 8 bytes interpreted as big-endian.\nReturns the lowest 8 bytes interpreted as little-endian.\nReturns the lowest 8 bytes interpreted as little-endian.\nReturns the lowest 8 bytes interpreted as native-endian.\nReturns the lowest 8 bytes interpreted as native-endian.\nReturns the number of trailing zeros in the binary …\nTry to add some <code>other</code> weight while upholding the <code>limit</code>.\nWrite to the slice in big-endian format.\nReturn a <code>Weight</code> where all fields are zero.\nZero (additive identity) of this type.\nReturns a new zero-initialized fixed hash.\nReturns a new zero-initialized fixed hash.\nABI spec for encoding/decoding contract calls.\nTrait for ABI-specific decoding.\nTrait for ABI-specific encoding with support for both …\nThe error type that can occur during decoding.\nMarker type for ink! ABI and SCALE encoding.\nink! ABI spec (uses Parity’s SCALE codec for …\nMarker type for Solidity ABI.\nSolidity ABI encoding.\nDecodes the data from a buffer using the provided ABI.\nEncodes the data into a fixed-size buffer, returning the …\nEncodes the data into a dynamically resizing vector.\nEncodes the value as a topic (i.e. an indexed event …\nEncodes the data into a new vector.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nStores the used host environment type of the ink! smart …\nRefers to the generated ink! smart contract reference type.\nRefers back to the original contract from the generated …\nThe environment type.\nThe generated contract reference type.\nThe original contract type.\nThe ABI spec for the decoding the message call.\nThe ABI spec for the decoding the constructor call.\nThe closure that can be used to dispatch into the …\nThe closure that can be used to dispatch into the …\nGuards against using invalid contract initializer types.\nStores the actual value of the constructor return type.\nGenerated type used to decode all dispatchable ink! …\nGenerated type used to decode all dispatchable ink! …\nStores the name of the ink! smart contract.\nFailed to read execution input for the dispatchable.\nThe closure for decoding message input.\nThe closure for decoding constructor input.\nDecodes an ink! dispatch input into a known selector and …\nAn error that can occur during dispatch of ink! …\nStores various information of the respective dispatchable …\nStores various information of the respective dispatchable …\nThe type of the error returned from the constructor. …\nThe error type of the constructor return type.\nStarts the execution of the respective ink! message or …\nThe unique id of the ink! trait definition.\nTrue if the constructor returns a <code>Result</code>.\nIs <code>true</code> if <code>Self</code> is <code>Result&lt;C, E&gt;</code>.\nIs <code>true</code> if <code>Self</code> is <code>Result&lt;C, E&gt;</code>.\nReflects the input types of the dispatchable ink! message.\nReflects the input types of the dispatchable ink! …\nFailed to decode the parameters for the selected …\nFailed to decode into a valid dispatch selector.\nThe label of the dispatchable ink! message.\nThe label of the dispatchable ink! constructor.\nYields <code>true</code> if the dispatchable ink! message mutates the …\nThe name of the ink! smart contract.\nThe name of the ink! trait.\nReflects the output type of the dispatchable ink! message.\nReflects the output type of the dispatchable ink! …\nThe module path of the ink! trait definition.\nYields <code>true</code> if the dispatchable ink! message is payable.\nYields <code>true</code> if the dispatchable ink! constructor is …\nIs <code>true</code> if the ink! trait message has been annotated with …\nInvalidly paid an unpayable dispatchable.\nclosure for returning per encoding todo: docs\nThe closure for returning return data.\nThe selector of the dispatchable ink! message.\nThe selector (if any) of the dispatchable ink! constructor.\nThe unique selector of the ink! trait message.\nThe ink! storage struct type.\nThe ink! storage struct type.\nType that is guaranteed by ink! to implement all ink! …\nCaptures info about an ink! trait definition.\nStores information for every ink! trait message of an ink! …\nThe ink! smart contract message decoder type.\nThe ink! smart contract constructor decoder type.\nThe decoded selector is not known to the dispatch decoder.\nConverts the return value into a <code>Result</code> instance.\ntodo: docs\nExecutes the ink! smart contract message or constructor.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nStores the actual value of the constructor return type.\nEquivalent Solidity ABI type from <code>alloy_sol_types</code>.\nEquivalent Solidity ABI type from <code>alloy_sol_types</code>.\nNewtype wrapper for Solidity ABI encoding a byte slice …\nAn encodable representation of the default value for this …\nA general decoding error.\nNewtype wrapper for Solidity ABI encoding/decoding <code>Vec&lt;u8&gt;</code> …\nSolidity ABI encoding/decoding error.\nNewtype wrapper for Solidity ABI encoding/decoding <code>[u8; N]</code> …\nTried to decode revert/error data into a non-Result type.\nName of equivalent Solidity ABI type.\nName of equivalent Solidity ABI type.\nName of equivalent Solidity ABI type.\nName of equivalent Solidity ABI type.\nName of equivalent Solidity ABI type.\nName of equivalent Solidity ABI type.\nMaps an arbitrary Rust/ink! type to a Solidity ABI type …\nMaps an arbitrary Rust/ink! type to a Solidity ABI type …\nSolidity ABI decode error data (if possible).\nSolidity ABI encode as error data.\nSolidity ABI decode from parameter data (e.g. function, …\nSolidity ABI encode as a parameter sequence (e.g. …\nSolidity ABI decode result data.\nError representing reason for failing to decode Solidity …\nSolidity ABI encode this type as a topic (i.e. an indexed …\nEquivalent Solidity ABI type representation.\nEquivalent Solidity ABI type representation.\nA Rust/ink! equivalent of a Solidity ABI type that …\nA Rust/ink! equivalent of a Solidity ABI type that …\nSolidity ABI decode error data into this type.\nSolidity ABI decode parameter data into this type.\nSolidity ABI decode result data into this type.\nSolidity ABI decode into this type.\nSolidity ABI decode into this type.\nSolidity ABI decode into this type.\nSolidity ABI decode the given data as a parameter sequence.\n<code>Self::topic_preimage</code> equivalent for the default value …\n<code>Self::topic_preimage_size</code> equivalent for the default value …\nDetokenizes this type’s value from the given token.\nSolidity ABI encode the value into Solidity error data.\nSolidity ABI encode the value as a parameter sequence.\nSolidity ABI encode the value.\nSolidity ABI encode the value.\nSolidity ABI encode the value.\nSolidity ABI encode the given value as a parameter …\nSolidity ABI encode the value as a topic (i.e. an indexed …\nSolidity ABI encode the value as a topic (i.e. an indexed …\nSolidity ABI encode the value as a topic (i.e. an indexed …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nConverts a reference to <code>[u8; N]</code> into a reference to …\nConverts a reference to <code>Vec&lt;u8&gt;</code> into a reference to …\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nConverts to <code>Self</code> from <code>Self::SolType</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs new empty <code>DynBytes</code> without allocating.\nConverts from <code>Self</code> to <code>Self::SolType</code> via either a borrow …\nTokenizes the given value into a <code>Self::AlloyType</code> token.\nEncode this type as input bytes for the hasher, when this …\nSize in bytes of the <code>Self::topic_preimage</code> encoding of this …\nThe default environment <code>AccountId</code> type.\nThe account id type.\ntodo remove A trait to enforce that a type should be an …\nA Solidity compatible <code>address</code> type.\nApplying an extrinsic.\nThe default balance type.\nSpecifies a maximum allowable balance for a deposit.\nThe type of balances.\nThe default block number type.\nThe type of block number.\nThe little-endian bytes representation.\nThe clear hash.\nThe equivalent of <code>Zero</code> for hashes.\nThe fundamental types of the default configuration.\nThe environmental types usable by contracts defined with …\nThe default event record type.\nTODO comment\nFinalizing the block.\nAllows to instantiate a type from its little-endian bytes …\nThe default gas type.\nThe default environment <code>Hash</code> type.\nThe type of hash.\nInitializing the block.\nThe maximum number of supported event topics provided by …\nThe ratio between the decimal representation of the native …\nThe type of origins supported by <code>pallet-revive</code>.\nA phase of a block’s execution.\nThe default timestamp type.\nThe type of a timestamp.\nAllows bypassing all balance transfer checks.\nThe event itself.\nThe event itself.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new instance from the little-endian bytes …\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the hash is clear.\nConverts from the generic <code>Balance</code> type to the Ethereum …\nThe phase of the block it happened in.\nThe phase of the block it happened in.\nThe list of the topics this event has.\nThe list of the topics this event has.")