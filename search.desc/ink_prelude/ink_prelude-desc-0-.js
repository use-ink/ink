searchState.loadedDescShard("ink_prelude", 0, "Data structures to operate on contract memory during …\nA well know selector reserved for the message required to …\nA module for working with borrowed data.\nThe <code>Box&lt;T&gt;</code> type for heap allocation.\nCollection types.\nCreates a <code>String</code> using interpolation of runtime …\nA UTF-8–encoded, growable string.\nA contiguous growable array type with heap-allocated …\nCreates a <code>Vec</code> containing the arguments.\nA trait for borrowing data.\nA trait for mutably borrowing data.\nBorrowed data.\nA clone-on-write smart pointer.\nOwned data.\nThe resulting type after obtaining ownership.\nA generalization of <code>Clone</code> to borrowed data.\nImmutably borrows from an owned value.\nMutably borrows from an owned value.\nUses borrowed data to replace owned data, usually by …\nCreates an owned Cow&lt;’a, B&gt; with the default value for …\nConverts a <code>&amp;</code><code>CString</code> into a borrowed <code>Cow</code> without copying or …\nConverts the string reference into a <code>Cow::Borrowed</code>.\nConverts a <code>String</code> into an <code>Owned</code> variant. No heap …\nCreates an <code>Owned</code> variant of <code>Cow</code> from an owned instance of …\nConverts a <code>CString</code> into an owned <code>Cow</code> without copying or …\nCreates a <code>Borrowed</code> variant of <code>Cow</code> from a slice.\nCreates a <code>Borrowed</code> variant of <code>Cow</code> from a reference to <code>Vec</code>.\nReturns the argument unchanged.\nCreates a clone-on-write pointer from a reference to …\nMoves the string into a <code>Cow::Owned</code>.\nCreates a clone-on-write pointer from an owned instance of …\nConverts a <code>CStr</code> into a borrowed <code>Cow</code> without copying or …\nConverts a <code>String</code> reference into a <code>Borrowed</code> variant. No …\nCreates a clone-on-write pointer from a reference to <code>Path</code>.\nCreates a <code>Borrowed</code> variant of <code>Cow</code> from a reference to an …\nConverts a string slice into a <code>Borrowed</code> variant. No heap …\nConverts the string reference into a <code>Cow::Borrowed</code>.\nCalls <code>U::from(self)</code>.\nExtracts the owned data.\nReturns true if the data is borrowed, i.e. if <code>to_mut</code> would …\nReturns true if the data is owned, i.e. if <code>to_mut</code> would be …\nAcquires a mutable reference to the owned form of the data.\nCreates owned data from borrowed data, usually by cloning.\nA pointer type that uniquely owns a heap allocation of …\nThinBox.\nReturns a reference to the underlying allocator.\nReturns a raw mutable pointer to the <code>Box</code>’s contents.\nReturns a raw pointer to the <code>Box</code>’s contents.\nConverts to <code>Box&lt;T, A&gt;</code>.\nConverts to <code>Box&lt;[T], A&gt;</code>.\nReturns a new box with a <code>clone()</code> of this box’s contents.\nCopies <code>source</code>’s contents into <code>self</code> without creating a …\nCopies <code>source</code>’s contents into <code>self</code> without creating a …\nCreates a <code>Box&lt;T&gt;</code>, with the <code>Default</code> value for T.\nAttempts to downcast the box to a concrete type.\nAttempts to downcast the box to a concrete type.\nAttempts to downcast the box to a concrete type.\nDowncasts the box to a concrete type.\nDowncasts the box to a concrete type.\nDowncasts the box to a concrete type.\nReturns the argument unchanged.\nConverts a <code>Cow&lt;&#39;a, CStr&gt;</code> into a <code>Box&lt;CStr&gt;</code>, by copying the …\nConverts a <code>str</code> into a box of dyn <code>Error</code> + <code>Send</code> + <code>Sync</code>.\nCopies the string into a newly allocated Box&lt;OsStr&gt;.\nConverts a <code>Cow&lt;&#39;_, str&gt;</code> into a <code>Box&lt;str&gt;</code>\nConverts a <code>CString</code> into a Box&lt;CStr&gt; without copying or …\nConverts a <code>Cow&lt;&#39;a, OsStr&gt;</code> into a Box&lt;OsStr&gt;, by copying …\nConverts the given <code>String</code> to a boxed <code>str</code> slice that is …\nConverts a <code>Box&lt;str&gt;</code> into a <code>Box&lt;[u8]&gt;</code>\nConverts a type of <code>Error</code> into a box of dyn <code>Error</code>.\nConverts a <code>[T; N]</code> into a <code>Box&lt;[T]&gt;</code>\nConverts an <code>OsString</code> into a Box&lt;OsStr&gt; without copying or …\nCreates a boxed <code>Path</code> from a reference.\nReturns the argument unchanged.\nCreates a boxed <code>Path</code> from a clone-on-write pointer.\nConverts a <code>PathBuf</code> into a Box&lt;Path&gt;.\nConverts a vector into a boxed slice.\nConverts a <code>&amp;CStr</code> into a <code>Box&lt;CStr&gt;</code>, by copying the contents …\nConverts a <code>Cow</code> into a box of dyn <code>Error</code>.\nConverts a <code>Cow</code> into a box of dyn <code>Error</code> + <code>Send</code> + <code>Sync</code>.\nConverts a <code>Cow&lt;&#39;_, [T]&gt;</code> into a <code>Box&lt;[T]&gt;</code>\nConverts a <code>&amp;[T]</code> into a <code>Box&lt;[T]&gt;</code>\nConverts a <code>T</code> into a <code>Box&lt;T&gt;</code>\nConverts a <code>str</code> into a box of dyn <code>Error</code>.\nConverts a type of <code>Error</code> + <code>Send</code> + <code>Sync</code> into a box of dyn …\nConverts a <code>String</code> into a box of dyn <code>Error</code> + <code>Send</code> + <code>Sync</code>.\nConverts a <code>String</code> into a box of dyn <code>Error</code>.\nConverts a <code>&amp;str</code> into a <code>Box&lt;str&gt;</code>\nConstructs a box from a <code>NonNull</code> pointer.\nConstructs a box from a <code>NonNull</code> pointer in the given …\nConstructs a box from a raw pointer.\nConstructs a box from a raw pointer in the given allocator.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts a <code>Box&lt;T&gt;</code> into a <code>Box&lt;[T]&gt;</code>\nConsumes the <code>Box</code>, returning the wrapped value.\nConsumes the <code>Box</code>, returning a wrapped <code>NonNull</code> pointer.\nConsumes the <code>Box</code>, returning a wrapped <code>NonNull</code> pointer and …\nConverts a <code>Box&lt;T&gt;</code> into a <code>Pin&lt;Box&lt;T&gt;&gt;</code>. If <code>T</code> does not …\nConsumes the <code>Box</code>, returning a wrapped raw pointer.\nConsumes the <code>Box</code>, returning a wrapped raw pointer and the …\nConsumes and leaks the <code>Box</code>, returning a mutable reference, …\nMoves a type to the heap with its <code>Metadata</code> stored in the …\nAllocates memory on the heap and then places <code>x</code> into it.\nAllocates memory in the given allocator then places <code>x</code> into …\nConstructs a new box with uninitialized contents.\nConstructs a new box with uninitialized contents in the …\nConstructs a new boxed slice with uninitialized contents.\nConstructs a new boxed slice with uninitialized contents …\nMoves a type to the heap with its <code>Metadata</code> stored in the …\nConstructs a new <code>Box</code> with uninitialized contents, with the …\nConstructs a new <code>Box</code> with uninitialized contents, with the …\nConstructs a new boxed slice with uninitialized contents, …\nConstructs a new boxed slice with uninitialized contents …\nConstructs a new <code>Pin&lt;Box&lt;T&gt;&gt;</code>. If <code>T</code> does not implement <code>Unpin</code>…\nConstructs a new <code>Pin&lt;Box&lt;T, A&gt;&gt;</code>. If <code>T</code> does not implement …\nAttempts to convert a <code>Vec&lt;T&gt;</code> into a <code>Box&lt;[T; N]&gt;</code>.\nAttempts to convert a <code>Box&lt;[T]&gt;</code> into a <code>Box&lt;[T; N]&gt;</code>.\nMoves a type to the heap with its <code>Metadata</code> stored in the …\nAllocates memory on the heap then places <code>x</code> into it, …\nAllocates memory in the given allocator then places <code>x</code> into …\nConstructs a new box with uninitialized contents on the …\nConstructs a new box with uninitialized contents in the …\nConstructs a new boxed slice with uninitialized contents. …\nConstructs a new boxed slice with uninitialized contents …\nConstructs a new <code>Box</code> with uninitialized contents, with the …\nConstructs a new <code>Box</code> with uninitialized contents, with the …\nConstructs a new boxed slice with uninitialized contents, …\nConstructs a new boxed slice with uninitialized contents …\nWrites the value and converts to <code>Box&lt;T, A&gt;</code>.\nThe memory allocator returned an error\nAn ordered map based on a B-Tree.\nAn ordered map based on a B-Tree.\nAn ordered set based on a B-Tree.\nAn ordered set based on a B-Tree.\nA priority queue implemented with a binary heap.\nA priority queue implemented with a binary heap.\nAn endpoint of a range of keys.\nAn endpoint of a range of keys.\nError due to the computed capacity exceeding the collection…\nAn exclusive bound.\nAn exclusive bound.\nA hash map implemented with quadratic probing and SIMD …\nA hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.\nAn inclusive bound.\nAn inclusive bound.\nA doubly-linked list with owned nodes.\nA doubly-linked list with owned nodes.\nThe error type for <code>try_reserve</code> methods.\nDetails of the allocation that caused a <code>TryReserveError</code>\nAn infinite endpoint. Indicates that there is no bound in …\nAn infinite endpoint. Indicates that there is no bound in …\nA double-ended queue implemented with a growable ring …\nA double-ended queue implemented with a growable ring …\nConverts from <code>&amp;mut Bound&lt;T&gt;</code> to <code>Bound&lt;&amp;mut T&gt;</code>.\nConverts from <code>&amp;Bound&lt;T&gt;</code> to <code>Bound&lt;&amp;T&gt;</code>.\nA priority queue implemented with a binary heap.\nReturns the intersection of <code>self</code> and <code>rhs</code> as a new …\nReturns the union of <code>self</code> and <code>rhs</code> as a new <code>HashSet&lt;T, S&gt;</code>.\nReturns the symmetric difference of <code>self</code> and <code>rhs</code> as a new …\nAn ordered map based on a B-Tree.\nAn ordered set based on a B-Tree.\nReturns the number of elements the map can hold without …\nReturns the number of elements the set can hold without …\nClears the map, removing all key-value pairs. Keeps the …\nClears the set, removing all values.\nOverwrites the contents of <code>self</code> with a clone of the …\nMap a <code>Bound&lt;&amp;T&gt;</code> to a <code>Bound&lt;T&gt;</code> by cloning the contents of …\nReturns <code>true</code> if the set contains a value.\nReturns <code>true</code> if the map contains a value for the specified …\nCreates an empty <code>HashMap&lt;K, V, S&gt;</code>, with the <code>Default</code> value …\nCreates an empty <code>HashSet&lt;T, S&gt;</code> with the <code>Default</code> value for …\nVisits the values representing the difference, i.e., the …\nClears the map, returning all key-value pairs as an …\nClears the set, returning all elements as an iterator. …\nGets the given key’s corresponding entry in the map for …\nCreates an iterator which uses a closure to determine if …\nCreates an iterator which uses a closure to determine if a …\nExamples\nReturns the argument unchanged.\nReturns the argument unchanged.\nExamples\nReturns the argument unchanged.\nReturns the argument unchanged.\nAlways evaluates to <code>TryReserveErrorKind::CapacityOverflow</code>.\nReturns the argument unchanged.\nReturns a reference to the value corresponding to the key.\nReturns a reference to the value in the set, if any, that …\nReturns the key-value pair corresponding to the supplied …\nAttempts to get mutable references to <code>N</code> values in the map …\nAttempts to get mutable references to <code>N</code> values in the map …\nReturns a mutable reference to the value corresponding to …\nInserts the given <code>value</code> into the set if it is not present, …\nInserts a value computed from <code>f</code> into the set if the given …\nA hash map implemented with quadratic probing and SIMD …\nA hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.\nReturns a reference to the map’s <code>BuildHasher</code>.\nReturns a reference to the set’s <code>BuildHasher</code>.\nReturns a reference to the value corresponding to the …\nInserts a key-value pair into the map.\nAdds a value to the set.\nVisits the values representing the intersection, i.e., the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a consuming iterator, that is, one that moves each …\nCreates a consuming iterator, that is, one that moves each …\nCreates a consuming iterator visiting all the keys in …\nCreates a consuming iterator visiting all the values in …\nReturns <code>true</code> if <code>self</code> has no elements in common with <code>other</code>. …\nReturns <code>true</code> if the map contains no elements.\nReturns <code>true</code> if the set contains no elements.\nReturns <code>true</code> if the set is a subset of another, i.e., <code>other</code>…\nReturns <code>true</code> if the set is a superset of another, i.e., …\nAn iterator visiting all key-value pairs in arbitrary …\nAn iterator visiting all elements in arbitrary order. The …\nAn iterator visiting all key-value pairs in arbitrary …\nAn iterator visiting all keys in arbitrary order. The …\nDetails about the allocation that caused the error\nReturns the number of elements in the map.\nReturns the number of elements in the set.\nA doubly-linked list with owned nodes.\nMaps a <code>Bound&lt;T&gt;</code> to a <code>Bound&lt;U&gt;</code> by applying a function to …\nCreates an empty <code>HashMap</code>.\nCreates an empty <code>HashSet</code>.\nCreates a raw immutable entry builder for the HashMap.\nCreates a raw entry builder for the HashMap.\nRemoves a key from the map, returning the value at the key …\nRemoves a value from the set. Returns whether the value was\nRemoves a key from the map, returning the stored key and …\nAdds a value to the set, replacing the existing value, if …\nReserves capacity for at least <code>additional</code> more elements to …\nReserves capacity for at least <code>additional</code> more elements to …\nRetains only the elements specified by the predicate.\nRetains only the elements specified by the predicate.\nShrinks the capacity of the map with a lower limit. It …\nShrinks the capacity of the set with a lower limit. It …\nShrinks the capacity of the map as much as possible. It …\nShrinks the capacity of the set as much as possible. It …\nReturns the difference of <code>self</code> and <code>rhs</code> as a new …\nVisits the values representing the symmetric difference, …\nRemoves and returns the value in the set, if any, that is …\nTries to insert a key-value pair into the map, and returns …\nTries to reserve capacity for at least <code>additional</code> more …\nTries to reserve capacity for at least <code>additional</code> more …\nVisits the values representing the union, i.e., all the …\nAn iterator visiting all values in arbitrary order. The …\nAn iterator visiting all values mutably in arbitrary order.\nA double-ended queue (deque) implemented with a growable …\nCreates an empty <code>HashMap</code> with at least the specified …\nCreates an empty <code>HashSet</code> with at least the specified …\nCreates an empty <code>HashMap</code> with at least the specified …\nCreates an empty <code>HashSet</code> with at least the specified …\nCreates an empty <code>HashMap</code> which will use the given hash …\nCreates a new empty hash set which will use the given …\nThe layout of allocation request that failed\nA priority queue implemented with a binary heap.\nA draining iterator over the elements of a <code>BinaryHeap</code>.\nA draining iterator over the elements of a <code>BinaryHeap</code>.\nAn owning iterator over the elements of a <code>BinaryHeap</code>.\nAn iterator over the elements of a <code>BinaryHeap</code>.\nStructure wrapping a mutable reference to the greatest …\nReturns a reference to the underlying allocator.\nReturns a reference to the underlying allocator.\nReturns a reference to the underlying allocator.\nReturns a reference to the underlying allocator.\nReturns a reference to the underlying allocator.\nMoves all the elements of <code>other</code> into <code>self</code>, leaving <code>other</code> …\nReturns a slice of all values in the underlying vector, in …\nReturns the number of elements the binary heap can hold …\nDrops all items from the binary heap.\nOverwrites the contents of <code>self</code> with a clone of the …\nCreates an empty <code>BinaryHeap&lt;T&gt;</code>.\nCreates an empty <code>binary_heap::Iter</code>.\nCreates an empty <code>binary_heap::IntoIter</code>.\nClears the binary heap, returning an iterator over the …\nClears the binary heap, returning an iterator over the …\nRemoves heap elements in heap order.\nConverts a <code>Vec&lt;T&gt;</code> into a <code>BinaryHeap&lt;T&gt;</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a consuming iterator, that is, one that moves each …\nReturns an iterator which retrieves elements in heap order.\nConsumes the <code>BinaryHeap</code> and returns a vector in sorted …\nConsumes the <code>BinaryHeap</code> and returns the underlying vector …\nChecks if the binary heap is empty.\nReturns an iterator visiting all values in the underlying …\nReturns the length of the binary heap.\nCreates an empty <code>BinaryHeap</code> as a max-heap.\nCreates an empty <code>BinaryHeap</code> as a max-heap, using <code>A</code> as …\nReturns the greatest item in the binary heap, or <code>None</code> if …\nReturns a mutable reference to the greatest item in the …\nRemoves the greatest item from the binary heap and returns …\nRemoves the peeked value from the heap and returns it.\nPushes an item onto the binary heap.\nReserves capacity for at least <code>additional</code> elements more …\nReserves the minimum capacity for at least <code>additional</code> …\nRetains only the elements specified by the predicate.\nDiscards capacity with a lower bound.\nDiscards as much additional capacity as possible.\nTries to reserve capacity for at least <code>additional</code> elements …\nTries to reserve the minimum capacity for at least …\nCreates an empty <code>BinaryHeap</code> with at least the specified …\nCreates an empty <code>BinaryHeap</code> with at least the specified …\nAn ordered map based on a B-Tree.\nA cursor over a <code>BTreeMap</code>.\nA cursor over a <code>BTreeMap</code> with editing operations.\nA cursor over a <code>BTreeMap</code> with editing operations, and …\nA view into a single entry in a map, which may either be …\nAn iterator produced by calling <code>extract_if</code> on BTreeMap.\nAn owning iterator over the entries of a <code>BTreeMap</code>, sorted …\nAn owning iterator over the keys of a <code>BTreeMap</code>.\nAn owning iterator over the values of a <code>BTreeMap</code>.\nAn iterator over the entries of a <code>BTreeMap</code>.\nA mutable iterator over the entries of a <code>BTreeMap</code>.\nAn iterator over the keys of a <code>BTreeMap</code>.\nAn occupied entry.\nA view into an occupied entry in a <code>BTreeMap</code>. It is part of …\nThe error returned by <code>try_insert</code> when the key already …\nAn iterator over a sub-range of entries in a <code>BTreeMap</code>.\nA mutable iterator over a sub-range of entries in a …\nError type returned by <code>CursorMut::insert_before</code> and …\nA vacant entry.\nA view into a vacant entry in a <code>BTreeMap</code>. It is part of …\nAn iterator over the values of a <code>BTreeMap</code>.\nA mutable iterator over the values of a <code>BTreeMap</code>.\nProvides in-place mutable access to an occupied entry …\nMoves all elements from <code>other</code> into <code>self</code>, leaving <code>other</code> …\nReturns a read-only cursor pointing to the same location …\nReturns a read-only cursor pointing to the same location …\nClears the map, removing all elements.\nReturns <code>true</code> if the map contains a value for the specified …\nCreates an empty <code>BTreeMap</code>.\nCreates an empty <code>btree_map::Iter</code>.\nCreates an empty <code>btree_map::IterMut</code>.\nCreates an empty <code>btree_map::IntoIter</code>.\nCreates an empty <code>btree_map::Keys</code>.\nCreates an empty <code>btree_map::Values</code>.\nCreates an empty <code>btree_map::ValuesMut</code>.\nCreates an empty <code>btree_map::IntoKeys</code>.\nCreates an empty <code>btree_map::IntoValues</code>.\nCreates an empty <code>btree_map::Range</code>.\nCreates an empty <code>btree_map::RangeMut</code>.\nGets the given key’s corresponding entry in the map for …\nThe entry in the map that was already occupied.\nCreates an iterator that visits all elements (key-value …\nReturns the first entry in the map for in-place …\nReturns the first key-value pair in the map. The key in …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a <code>[(K, V); N]</code> into a <code>BTreeMap&lt;(K, V)&gt;</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets a reference to the value in the entry.\nReturns a reference to the value corresponding to the key.\nReturns the key-value pair corresponding to the supplied …\nGets a mutable reference to the value in the entry.\nReturns a mutable reference to the value corresponding to …\nReturns a reference to the value corresponding to the …\nSets the value of the entry with the <code>VacantEntry</code>’s key, …\nSets the value of the entry with the <code>OccupiedEntry</code>’s key,\nInserts a key-value pair into the map.\nInserts a new key-value pair into the map in the gap that …\nInserts a new key-value pair into the map in the gap that …\nInserts a new key-value pair into the map in the gap that …\nInserts a new key-value pair into the map in the gap that …\nInserts a new key-value pair into the map in the gap that …\nInserts a new key-value pair into the map in the gap that …\nInserts a new key-value pair into the map in the gap that …\nInserts a new key-value pair into the map in the gap that …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGets an owning iterator over the entries of the map, …\nTake ownership of the key.\nCreates a consuming iterator visiting all the keys, in …\nConverts the entry into a mutable reference to its value.\nCreates a consuming iterator visiting all the values, in …\nReturns <code>true</code> if the map contains no elements.\nGets an iterator over the entries of the map, sorted by …\nGets a mutable iterator over the entries of the map, …\nReturns a reference to this entry’s key.\nGets a reference to the key that would be used when …\nGets a reference to the key in the entry.\nGets an iterator over the keys of the map, in sorted order.\nReturns the last entry in the map for in-place …\nReturns the last key-value pair in the map. The key in …\nReturns the number of elements in the map.\nReturns a <code>Cursor</code> pointing at the gap before the smallest …\nReturns a <code>CursorMut</code> pointing at the gap before the …\nMakes a new, empty <code>BTreeMap</code>.\nMakes a new empty BTreeMap with a reasonable choice for B.\nAdvances the cursor to the next gap, returning the key and …\nAdvances the cursor to the next gap, returning the key and …\nAdvances the cursor to the next gap, returning the key and …\nEnsures a value is in the entry by inserting the default …\nEnsures a value is in the entry by inserting the default …\nEnsures a value is in the entry by inserting the result of …\nEnsures a value is in the entry by inserting, if empty, …\nReturns a reference to the key and value of the next …\nReturns a reference to the key and value of the next …\nReturns a reference to the key and value of the next …\nReturns a reference to the key and value of the previous …\nReturns a reference to the key and value of the previous …\nReturns a reference to the key and value of the previous …\nRemoves and returns the first element in the map. The key …\nRemoves and returns the last element in the map. The key …\nAdvances the cursor to the previous gap, returning the key …\nAdvances the cursor to the previous gap, returning the key …\nAdvances the cursor to the previous gap, returning the key …\nConstructs a double-ended iterator over a sub-range of …\nConstructs a mutable double-ended iterator over a …\nTakes the value of the entry out of the map, and returns …\nRemoves a key from the map, returning the value at the key …\nTake ownership of the key and value from the map.\nRemoves a key from the map, returning the stored key and …\nRemoves the next element from the <code>BTreeMap</code>.\nRemoves the next element from the <code>BTreeMap</code>.\nRemoves the preceding element from the <code>BTreeMap</code>.\nRemoves the preceding element from the <code>BTreeMap</code>.\nRetains only the elements specified by the predicate.\nSplits the collection into two at the given key. Returns …\nTries to insert a key-value pair into the map, and returns …\nReturns a <code>Cursor</code> pointing at the gap after the greatest key\nReturns a <code>CursorMut</code> pointing at the gap after the greatest …\nThe value which was not inserted, because the entry was …\nGets an iterator over the values of the map, in order by …\nGets a mutable iterator over the values of the map, in …\nConverts the cursor into a <code>CursorMutKey</code>, which allows …\nAn ordered set based on a B-Tree.\nA cursor over a <code>BTreeSet</code>.\nA cursor over a <code>BTreeSet</code> with editing operations.\nA cursor over a <code>BTreeSet</code> with editing operations, and …\nA lazy iterator producing elements in the difference of …\nAn iterator produced by calling <code>extract_if</code> on BTreeSet.\nA lazy iterator producing elements in the intersection of …\nAn owning iterator over the items of a <code>BTreeSet</code> in …\nAn iterator over the items of a <code>BTreeSet</code>.\nAn iterator over a sub-range of items in a <code>BTreeSet</code>.\nA lazy iterator producing elements in the symmetric …\nA lazy iterator producing elements in the union of <code>BTreeSet</code>…\nError type returned by <code>CursorMut::insert_before</code> and …\nMoves all elements from <code>other</code> into <code>self</code>, leaving <code>other</code> …\nReturns a read-only cursor pointing to the same location …\nReturns a read-only cursor pointing to the same location …\nReturns the intersection of <code>self</code> and <code>rhs</code> as a new …\nReturns the union of <code>self</code> and <code>rhs</code> as a new <code>BTreeSet&lt;T&gt;</code>.\nReturns the symmetric difference of <code>self</code> and <code>rhs</code> as a new …\nClears the set, removing all elements.\nReturns <code>true</code> if the set contains an element equal to the …\nCreates an empty <code>BTreeSet</code>.\nCreates an empty <code>btree_set::Iter</code>.\nCreates an empty <code>btree_set::IntoIter</code>.\nCreates an empty <code>btree_set::Range</code>.\nVisits the elements representing the difference, i.e., the …\nCreates an iterator that visits all elements in ascending …\nReturns a reference to the first element in the set, if …\nConverts a <code>[T; N]</code> into a <code>BTreeSet&lt;T&gt;</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a reference to the element in the set, if any, …\nAdds a value to the set.\nInserts a new element into the set in the gap that the …\nInserts a new element into the set in the gap that the …\nInserts a new element into the set in the gap that the …\nInserts a new element into the set in the gap that the …\nInserts a new element into the set in the gap that the …\nInserts a new element into the set in the gap that the …\nInserts a new element into the set in the gap that the …\nInserts a new element into the set in the gap that the …\nVisits the elements representing the intersection, i.e., …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGets an iterator for moving out the <code>BTreeSet</code>’s contents …\nReturns <code>true</code> if <code>self</code> has no elements in common with <code>other</code>. …\nReturns <code>true</code> if the set contains no elements.\nReturns <code>true</code> if the set is a subset of another, i.e., <code>other</code>…\nReturns <code>true</code> if the set is a superset of another, i.e., …\nGets an iterator that visits the elements in the <code>BTreeSet</code> …\nReturns a reference to the last element in the set, if any.\nReturns the number of elements in the set.\nReturns a <code>Cursor</code> pointing at the gap before the smallest …\nReturns a <code>CursorMut</code> pointing at the gap before the …\nMakes a new, empty <code>BTreeSet</code>.\nMakes a new <code>BTreeSet</code> with a reasonable choice of B.\nAdvances the cursor to the next gap, returning the element …\nAdvances the cursor to the next gap, returning the  …\nAdvances the cursor to the next gap, returning the element …\nReturns a reference to the next element without moving the …\nReturns a reference to the next element without moving the …\nReturns a reference to next element without moving the …\nReturns a reference to the previous element without moving …\nReturns a reference to the previous element without moving …\nReturns a reference to the previous element without moving …\nRemoves the first element from the set and returns it, if …\nRemoves the last element from the set and returns it, if …\nAdvances the cursor to the previous gap, returning the …\nAdvances the cursor to the previous gap, returning the …\nAdvances the cursor to the previous gap, returning the …\nConstructs a double-ended iterator over a sub-range of …\nIf the set contains an element equal to the value, removes …\nRemoves the next element from the <code>BTreeSet</code>.\nRemoves the next element from the <code>BTreeSet</code>.\nRemoves the preceding element from the <code>BTreeSet</code>.\nRemoves the preceding element from the <code>BTreeSet</code>.\nAdds a value to the set, replacing the existing element, …\nRetains only the elements specified by the predicate.\nSplits the collection into two at the value. Returns a new …\nReturns the difference of <code>self</code> and <code>rhs</code> as a new <code>BTreeSet&lt;T&gt;</code>…\nVisits the elements representing the symmetric difference, …\nRemoves and returns the element in the set, if any, that …\nVisits the elements representing the union, i.e., all the …\nReturns a <code>Cursor</code> pointing at the gap after the greatest …\nReturns a <code>CursorMut</code> pointing at the gap after the greatest …\nConverts the cursor into a <code>CursorMutKey</code>, which allows …\nThe default <code>Hasher</code> used by <code>RandomState</code>.\nA draining iterator over the entries of a <code>HashMap</code>.\nA view into a single entry in a map, which may either be …\nA draining, filtering iterator over the entries of a …\nA hash map implemented with quadratic probing and SIMD …\nAn owning iterator over the entries of a <code>HashMap</code>.\nAn owning iterator over the keys of a <code>HashMap</code>.\nAn owning iterator over the values of a <code>HashMap</code>.\nAn iterator over the entries of a <code>HashMap</code>.\nA mutable iterator over the entries of a <code>HashMap</code>.\nAn iterator over the keys of a <code>HashMap</code>.\nAn occupied entry.\nAn occupied entry.\nA view into an occupied entry in a <code>HashMap</code>. It is part of …\nThe error returned by <code>try_insert</code> when the key already …\n<code>RandomState</code> is the default state for <code>HashMap</code> types.\nA builder for computing where in a HashMap a key-value …\nA builder for computing where in a HashMap a key-value …\nA view into a single entry in a map, which may either be …\nA view into an occupied entry in a <code>HashMap</code>. It is part of …\nA view into a vacant entry in a <code>HashMap</code>. It is part of the …\nA vacant entry.\nA vacant entry.\nA view into a vacant entry in a <code>HashMap</code>. It is part of the …\nAn iterator over the values of a <code>HashMap</code>.\nA mutable iterator over the values of a <code>HashMap</code>.\nProvides in-place mutable access to an occupied entry …\nProvides in-place mutable access to an occupied entry …\nConstructs a new <code>RandomState</code>.\nCreates a new <code>DefaultHasher</code> using <code>new</code>. See its …\nThe entry in the map that was already occupied.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>RawEntryMut</code> from the given hash.\nAccess an entry by hash.\nCreates a <code>RawEntryMut</code> from the given key.\nAccess an entry by key.\nCreates a <code>RawEntryMut</code> from the given key and its hash.\nAccess an entry by a key and its hash.\nGets a reference to the value in the entry.\nGets a reference to the value in the entry.\nGets a reference to the key and value in the entry.\nGets a mutable reference to the key and value in the entry.\nGets a mutable reference to the value in the entry.\nGets a mutable reference to the value in the entry.\nSets the value of the entry, and returns the entry’s old …\nSets the value of the entry with the <code>VacantEntry</code>’s key, …\nSets the value of the entry, and returns the entry’s old …\nSets the value of the entry with the <code>VacantEntry</code>’s key, …\nSets the value of the entry, and returns an <code>OccupiedEntry</code>.\nSets the value of the entry with the <code>VacantEntry</code>’s key, …\nSets the value of the entry with the VacantEntry’s key, …\nSets the value of the entry, and returns the entry’s old …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the entry into a mutable reference to the key in …\nTake ownership of the key.\nConverts the <code>OccupiedEntry</code> into a mutable reference to the …\nConverts the <code>OccupiedEntry</code> into a mutable reference to the …\nConverts the <code>OccupiedEntry</code> into a mutable reference to the …\nGets a reference to the key in the entry.\nReturns a reference to this entry’s key.\nGets a reference to the key in the entry.\nGets a reference to the key that would be used when …\nGets a mutable reference to the key in the entry.\nConstructs a new <code>RandomState</code> that is initialized with …\nCreates a new <code>DefaultHasher</code>.\nEnsures a value is in the entry by inserting the default …\nEnsures a value is in the entry by inserting the default …\nEnsures a value is in the entry by inserting the default …\nEnsures a value is in the entry by inserting the result of …\nEnsures a value is in the entry by inserting the result of …\nEnsures a value is in the entry by inserting, if empty, …\nTakes the value out of the entry, and returns it.\nTakes the value out of the entry, and returns it.\nTake the ownership of the key and value from the map.\nTake the ownership of the key and value from the map.\nThe value which was not inserted, because the entry was …\nA lazy iterator producing elements in the difference of …\nA draining iterator over the items of a <code>HashSet</code>.\nA draining, filtering iterator over the items of a <code>HashSet</code>.\nA hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.\nA lazy iterator producing elements in the intersection of …\nAn owning iterator over the items of a <code>HashSet</code>.\nAn iterator over the items of a <code>HashSet</code>.\nA lazy iterator producing elements in the symmetric …\nA lazy iterator producing elements in the union of <code>HashSet</code>…\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA cursor over a <code>LinkedList</code>.\nA cursor over a <code>LinkedList</code> with editing operations.\nAn iterator produced by calling <code>extract_if</code> on LinkedList.\nAn owning iterator over the elements of a <code>LinkedList</code>.\nAn iterator over the elements of a <code>LinkedList</code>.\nA mutable iterator over the elements of a <code>LinkedList</code>.\nA doubly-linked list with owned nodes.\nMoves all elements from <code>other</code> to the end of the list.\nReturns a read-only cursor pointing to the current element.\nProvides a reference to the cursor’s parent list.\nProvides a read-only reference to the cursor’s parent …\nProvides a reference to the back element, or <code>None</code> if the …\nProvides a reference to the back element of the cursor’s …\nProvides a reference to the back element of the cursor’s …\nProvides a mutable reference to the back element, or <code>None</code> …\nProvides a mutable reference to back element of the cursor…\nRemoves all elements from the <code>LinkedList</code>.\nOverwrites the contents of <code>self</code> with a clone of the …\nReturns <code>true</code> if the <code>LinkedList</code> contains an element equal …\nReturns a reference to the element that the cursor is …\nReturns a reference to the element that the cursor is …\nProvides a cursor at the back element.\nProvides a cursor with editing operations at the back …\nProvides a cursor at the front element.\nProvides a cursor with editing operations at the front …\nCreates an empty <code>LinkedList&lt;T&gt;</code>.\nCreates an empty <code>linked_list::Iter</code>.\nCreates an empty <code>linked_list::IntoIter</code>.\nCreates an iterator which uses a closure to determine if …\nReturns the argument unchanged.\nConverts a <code>[T; N]</code> into a <code>LinkedList&lt;T&gt;</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nProvides a reference to the front element, or <code>None</code> if the …\nProvides a reference to the front element of the cursor’…\nProvides a reference to the front element of the cursor’…\nProvides a mutable reference to the front element, or <code>None</code> …\nProvides a mutable reference to the front element of the …\nReturns the cursor position index within the <code>LinkedList</code>.\nReturns the cursor position index within the <code>LinkedList</code>.\nInserts a new element into the <code>LinkedList</code> after the …\nInserts a new element into the <code>LinkedList</code> before the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the list into an iterator yielding elements by …\nReturns <code>true</code> if the <code>LinkedList</code> is empty.\nProvides a forward iterator.\nProvides a forward iterator with mutable references.\nReturns the length of the <code>LinkedList</code>.\nMoves the cursor to the next element of the <code>LinkedList</code>.\nMoves the cursor to the next element of the <code>LinkedList</code>.\nMoves the cursor to the previous element of the <code>LinkedList</code>.\nMoves the cursor to the previous element of the <code>LinkedList</code>.\nCreates an empty <code>LinkedList</code>.\nConstructs an empty <code>LinkedList&lt;T, A&gt;</code>.\nReturns a reference to the next element.\nReturns a reference to the next element.\nReturns a reference to the previous element.\nReturns a reference to the previous element.\nRemoves the last element from a list and returns it, or …\nRemoves the last element from the cursor’s parent list …\nRemoves the first element and returns it, or <code>None</code> if the …\nRemoves the first element from the cursor’s parent list …\nAppends an element to the back of a list.\nAppends an element to the back of the cursor’s parent …\nAdds an element first in the list.\nAppends an element to the front of the cursor’s parent …\nRemoves the element at the given index and returns it.\nRemoves the current element from the <code>LinkedList</code>.\nRemoves the current element from the <code>LinkedList</code> without …\nRetains only the elements specified by the predicate.\nRetains only the elements specified by the predicate.\nInserts the elements from the given <code>LinkedList</code> after the …\nInserts the elements from the given <code>LinkedList</code> before the …\nSplits the list into two after the current element. This …\nSplits the list into two before the current element. This …\nSplits the list into two at the given index. Returns …\nA draining iterator over the elements of a <code>VecDeque</code>.\nAn owning iterator over the elements of a <code>VecDeque</code>.\nAn iterator over the elements of a <code>VecDeque</code>.\nA mutable iterator over the elements of a <code>VecDeque</code>.\nA double-ended queue implemented with a growable ring …\nReturns a reference to the underlying allocator.\nMoves all the elements of <code>other</code> into <code>self</code>, leaving <code>other</code> …\nReturns a pair of slices which contain, in order, the …\nReturns a pair of slices which contain, in order, the …\nProvides a reference to the back element, or <code>None</code> if the …\nProvides a mutable reference to the back element, or <code>None</code> …\nBinary searches this <code>VecDeque</code> for a given element. If the …\nBinary searches this <code>VecDeque</code> with a comparator function.\nBinary searches this <code>VecDeque</code> with a key extraction …\nReturns the number of elements the deque can hold without …\nClears the deque, removing all values.\nOverwrites the contents of <code>self</code> with a clone of the …\nReturns <code>true</code> if the deque contains an element equal to the …\nCreates an empty <code>vec_deque::IterMut</code>.\nCreates an empty <code>vec_deque::Iter</code>.\nCreates an empty deque.\nRemoves the specified range from the deque in bulk, …\nReturns the contents of the “front” slice as returned …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a <code>[T; N]</code> into a <code>VecDeque&lt;T&gt;</code>.\nTurn a <code>Vec&lt;T&gt;</code> into a <code>VecDeque&lt;T&gt;</code>.\nReturns the argument unchanged.\nProvides a reference to the front element, or <code>None</code> if the …\nProvides a mutable reference to the front element, or <code>None</code> …\nProvides a reference to the element at the given index.\nProvides a mutable reference to the element at the given …\nInserts an element at <code>index</code> within the deque, shifting all …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the deque into a front-to-back iterator yielding …\nReturns <code>true</code> if the deque is empty.\nReturns a front-to-back iterator.\nReturns a front-to-back iterator that returns mutable …\nReturns the number of elements in the deque.\nRearranges the internal storage of this deque so it is one …\nCreates an empty deque.\nCreates an empty deque.\nReturns the index of the partition point according to the …\nRemoves the last element from the deque and returns it, or …\nRemoves the first element and returns it, or <code>None</code> if the …\nAppends an element to the back of the deque.\nPrepends an element to the deque.\nCreates an iterator that covers the specified range in the …\nCreates an iterator that covers the specified mutable …\nFill <code>buf</code> with the contents of the “front” slice as …\nRemoves and returns the element at <code>index</code> from the deque. …\nReserves capacity for at least <code>additional</code> more elements to …\nReserves the minimum capacity for at least <code>additional</code> more …\nModifies the deque in-place so that <code>len()</code> is equal to …\nModifies the deque in-place so that <code>len()</code> is equal to …\nRetains only the elements specified by the predicate.\nRetains only the elements specified by the predicate.\nRotates the double-ended queue <code>n</code> places to the left.\nRotates the double-ended queue <code>n</code> places to the right.\nShrinks the capacity of the deque with a lower bound.\nShrinks the capacity of the deque as much as possible.\nSplits the deque into two at the given index.\nSwaps elements at indices <code>i</code> and <code>j</code>.\nRemoves an element from anywhere in the deque and returns …\nRemoves an element from anywhere in the deque and returns …\nShortens the deque, keeping the first <code>len</code> elements and …\nTries to reserve capacity for at least <code>additional</code> more …\nTries to reserve the minimum capacity for at least …\nCreates an empty deque with space for at least <code>capacity</code> …\nCreates an empty deque with space for at least <code>capacity</code> …\nCreates an empty deque with space for at least <code>capacity</code> …\nA draining iterator for <code>String</code>.\nA possible error value when converting a <code>String</code> from a …\nA possible error value when converting a <code>String</code> from a …\nA type alias for <code>Infallible</code>.\nA UTF-8–encoded, growable string.\nA trait for converting a value to a <code>String</code>.\nReturns a byte slice of this <code>String</code>’s contents.\nReturns a slice of <code>u8</code>s bytes that were attempted to …\nConverts a <code>String</code> into a mutable string slice.\nReturns a mutable reference to the contents of this <code>String</code>.\nReturns the remaining (sub)string of this iterator as a …\nExtracts a string slice containing the entire <code>String</code>.\nReturns this <code>String</code>’s capacity, in bytes.\nTruncates this <code>String</code>, removing all contents.\nClones the contents of <code>source</code> into <code>self</code>.\nCreates an empty <code>String</code>.\nRemoves the specified range from the string in bulk, …\nCopies elements from <code>src</code> range to the end of the string.\nReturns the argument unchanged.\nConverts a <code>&amp;String</code> into a <code>String</code>.\nConverts a clone-on-write string to an owned instance of …\nConverts a <code>&amp;mut str</code> into a <code>String</code>.\nConverts a <code>&amp;str</code> into a <code>String</code>.\nReturns the argument unchanged.\nAllocates an owned <code>String</code> from a single character.\nConverts the given boxed <code>str</code> slice to a <code>String</code>. It is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>String</code> from a pointer, a length and a …\nDecode a UTF-16–encoded vector <code>v</code> into a <code>String</code>, …\nDecode a UTF-16–encoded slice <code>v</code> into a <code>String</code>, replacing …\nDecode a UTF-16BE–encoded vector <code>v</code> into a <code>String</code>, …\nDecode a UTF-16BE–encoded slice <code>v</code> into a <code>String</code>, …\nDecode a UTF-16LE–encoded vector <code>v</code> into a <code>String</code>, …\nDecode a UTF-16LE–encoded slice <code>v</code> into a <code>String</code>, …\nConverts a vector of bytes to a <code>String</code>.\nConverts a slice of bytes to a string, including invalid …\nConverts a <code>Vec&lt;u8&gt;</code> to a <code>String</code>, substituting invalid UTF-8 …\nConverts a vector of bytes to a <code>String</code> without checking …\nInserts a character into this <code>String</code> at a byte position.\nInserts a string slice into this <code>String</code> at a byte position.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts this <code>String</code> into a Box&lt;str&gt;.\nConverts a <code>String</code> into a byte vector.\nReturns the bytes that were attempted to convert to a …\nDecomposes a <code>String</code> into its raw components: …\nConverts the bytes into a <code>String</code> lossily, substituting …\nReturns <code>true</code> if this <code>String</code> has a length of zero, and <code>false</code>…\nConsumes and leaks the <code>String</code>, returning a mutable …\nReturns the length of this <code>String</code>, in bytes, not <code>char</code>s or …\nCreates a new empty <code>String</code>.\nRemoves the last character from the string buffer and …\nAppends the given <code>char</code> to the end of this <code>String</code>.\nAppends a given string slice onto the end of this <code>String</code>.\nRemoves a <code>char</code> from this <code>String</code> at a byte position and …\nRemove all matches of pattern <code>pat</code> in the <code>String</code>.\nRemoves the specified range in the string, and replaces it …\nReserves capacity for at least <code>additional</code> bytes more than …\nReserves the minimum capacity for at least <code>additional</code> …\nRetains only the characters specified by the predicate.\nShrinks the capacity of this <code>String</code> with a lower bound.\nShrinks the capacity of this <code>String</code> to match its length.\nSplits the string into two at the given byte index.\nConverts the given value to a <code>String</code>.\nShortens this <code>String</code> to the specified length.\nTries to reserve capacity for at least <code>additional</code> bytes …\nTries to reserve the minimum capacity for at least …\nCreates a new empty <code>String</code> with at least the specified …\nFetch a <code>Utf8Error</code> to get more details about the conversion …\nCreates a new empty <code>String</code> with at least the specified …\nA draining iterator for <code>Vec&lt;T&gt;</code>.\nAn iterator which uses a closure to determine if an …\nAn iterator that moves out of a vector.\nA splicing iterator for <code>Vec</code>.\nA contiguous growable array type, written as <code>Vec&lt;T&gt;</code>, short …\nReturns a reference to the underlying allocator.\nReturns a reference to the underlying allocator.\nReturns a reference to the underlying allocator.\nReturns a reference to the underlying allocator.\nMoves all the elements of <code>other</code> into <code>self</code>, leaving <code>other</code> …\nReturns a raw mutable pointer to the vector’s buffer, or …\nReturns the remaining items of this iterator as a mutable …\nExtracts a mutable slice of the entire vector.\nReturns a <code>NonNull</code> pointer to the vector’s buffer, or a …\nReturns a raw pointer to the vector’s buffer, or a …\nReturns the remaining items of this iterator as a slice.\nReturns the remaining items of this iterator as a slice.\nExtracts a slice containing the entire vector.\nReturns the total number of elements the vector can hold …\nClears the vector, removing all values.\nOverwrites the contents of <code>self</code> with a clone of the …\nRemoves consecutive repeated elements in the vector …\nRemoves all but the first of consecutive elements in the …\nRemoves all but the first of consecutive elements in the …\nCreates an empty <code>vec::IntoIter</code>.\nCreates an empty <code>Vec&lt;T&gt;</code>.\nRemoves the specified range from the vector in bulk, …\nClones and appends all elements in a slice to the <code>Vec</code>.\nCopies elements from <code>src</code> range to the end of the vector.\nCreates an iterator which uses a closure to determine if …\nReturns the argument unchanged.\nReturns the argument unchanged.\nTurn a <code>VecDeque&lt;T&gt;</code> into a <code>Vec&lt;T&gt;</code>.\nReturns the argument unchanged.\nConverts a clone-on-write slice into a vector.\nConverts a boxed slice into a vector by transferring …\nAllocates a <code>Vec&lt;u8&gt;</code> and fills it with a UTF-8 string.\nConverts the given <code>String</code> to a vector <code>Vec</code> that holds …\nAllocates a <code>Vec&lt;T&gt;</code> and moves <code>s</code>’s items into it.\nConverts a <code>BinaryHeap&lt;T&gt;</code> into a <code>Vec&lt;T&gt;</code>.\nAllocates a <code>Vec&lt;T&gt;</code> and fills it by cloning <code>s</code>’s items.\nConverts a <code>CString</code> into a Vec&lt;u8&gt;.\nAllocates a <code>Vec&lt;T&gt;</code> and fills it by cloning <code>s</code>’s items.\nAllocates a <code>Vec&lt;T&gt;</code> and fills it by cloning <code>s</code>’s items.\nAllocates a <code>Vec&lt;T&gt;</code> and fills it by cloning <code>s</code>’s items.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>Vec&lt;T&gt;</code> directly from a <code>NonNull</code> pointer, a …\nCreates a <code>Vec&lt;T, A&gt;</code> directly from a <code>NonNull</code> pointer, a …\nCreates a <code>Vec&lt;T&gt;</code> directly from a pointer, a length, and a …\nCreates a <code>Vec&lt;T, A&gt;</code> directly from a pointer, a length, a …\nInserts an element at position <code>index</code> within the vector, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the vector into <code>Box&lt;[T]&gt;</code>.\nTakes a <code>Vec&lt;[T; N]&gt;</code> and flattens it into a <code>Vec&lt;T&gt;</code>.\nCreates a consuming iterator, that is, one that moves each …\nDecomposes a <code>Vec&lt;T&gt;</code> into its raw components: …\nDecomposes a <code>Vec&lt;T&gt;</code> into its raw components: …\nDecomposes a <code>Vec&lt;T&gt;</code> into its raw components: …\nDecomposes a <code>Vec&lt;T&gt;</code> into its raw components: …\nReturns <code>true</code> if the vector contains no elements.\nKeep unyielded elements in the source <code>Vec</code>.\nConsumes and leaks the <code>Vec</code>, returning a mutable reference …\nReturns the number of elements in the vector, also …\nConstructs a new, empty <code>Vec&lt;T&gt;</code>.\nConstructs a new, empty <code>Vec&lt;T, A&gt;</code>.\nRemoves the last element from a vector and returns it, or …\nRemoves and returns the last element in a vector if the …\nAppends an element to the back of a collection.\nAppends an element if there is sufficient spare capacity, …\nRemoves and returns the element at position <code>index</code> within …\nReserves capacity for at least <code>additional</code> more elements to …\nReserves the minimum capacity for at least <code>additional</code> more …\nResizes the <code>Vec</code> in-place so that <code>len</code> is equal to <code>new_len</code>.\nResizes the <code>Vec</code> in-place so that <code>len</code> is equal to <code>new_len</code>.\nRetains only the elements specified by the predicate.\nRetains only the elements specified by the predicate, …\nForces the length of the vector to <code>new_len</code>.\nShrinks the capacity of the vector with a lower bound.\nShrinks the capacity of the vector as much as possible.\nReturns the remaining spare capacity of the vector as a …\nCreates a splicing iterator that replaces the specified …\nReturns vector content as a slice of <code>T</code>, along with the …\nSplits the collection into two at the given index.\nRemoves an element from the vector and returns it.\nShortens the vector, keeping the first <code>len</code> elements and …\nTries to reserve capacity for at least <code>additional</code> more …\nTries to reserve the minimum capacity for at least …\nConstructs a new, empty <code>Vec&lt;T&gt;</code> with at least the specified …\nConstructs a new, empty <code>Vec&lt;T, A&gt;</code> with at least the …\nConstructs a new, empty <code>Vec&lt;T&gt;</code> with at least the specified …\nConstructs a new, empty <code>Vec&lt;T, A&gt;</code> with at least the …")