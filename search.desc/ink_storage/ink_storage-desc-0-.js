searchState.loadedDescShard("ink_storage", 0, "The <code>ink_storage</code> utilities used to manipulate and organize …\nA simple wrapper around a type to store it in a separate …\nA mapping of key-value pairs directly into contract …\nA vector of values (elements) directly on contract storage.\nDelete all elements from storage.\nClears the value of the element at <code>index</code>. It doesn’t …\nChecks if a value is stored at the given <code>key</code> in the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet the <code>value</code> at <code>key</code> from the contract storage.\nAccess an element at given <code>index</code>.\nReads the <code>value</code> from the contract storage, if it exists.\nReads the <code>value</code> from the contract storage.\nInsert the given <code>value</code> to the contract storage.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the vector contains no elements.\nReturns the number of elements in the vector, also …\nCreates a new empty <code>Mapping</code>.\nCreates a new empty <code>StorageVec</code>.\nCreates a new empty <code>Lazy</code>.\nGet a copy of the last element without removing it from …\nClears the last element from the storage and returns it. …\nAppends an element to the back of the vector.\nClears the value at <code>key</code> from storage.\nSet the <code>value</code> at given <code>index</code>.\nWrites the given <code>value</code> to the contract storage.\nGet the size in bytes of a value stored at <code>key</code> in the …\nRemoves the <code>value</code> at <code>key</code>, returning the previous <code>value</code> at …\nTry to get the <code>value</code> at the given <code>key</code>.\nTry to access an element at given <code>index</code>.\nTry to read the <code>value</code> from the contract storage.\nTry to insert the given <code>value</code> into the mapping under given …\nTry to get a copy of the last element without removing it …\nTry to clear and return the last element from storage. …\nTry to append an element to the back of the vector.\nTry to set the <code>value</code> at given <code>index</code>.\nTry to set the given <code>value</code> to the contract storage.\nTry to take the <code>value</code> at the given <code>key</code>. On success, this …")