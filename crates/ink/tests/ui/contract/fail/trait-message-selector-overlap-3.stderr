error[E0119]: conflicting implementations of trait `DispatchableMessageInfo<42>` for type `Contract`
  --> tests/ui/contract/fail/trait-message-selector-overlap-3.rs:43:9
   |
38 |         fn message1(&self) {}
   |         --------------------- first implementation here
...
43 |         fn message2(&self) {}
   |         ^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `Contract`

error[E0119]: conflicting implementations of trait `TraitCallForwarderFor<42>` for type `contract::_::CallBuilder`
  --> tests/ui/contract/fail/trait-message-selector-overlap-3.rs:41:5
   |
36 | /     impl TraitDefinition1 for Contract {
37 | |         #[ink(message)]
38 | |         fn message1(&self) {}
39 | |     }
   | |_____- first implementation here
40 |
41 | /     impl TraitDefinition2 for Contract {
42 | |         #[ink(message)]
43 | |         fn message2(&self) {}
44 | |     }
   | |_____^ conflicting implementation for `contract::_::CallBuilder`

error[E0283]: type annotations needed
  --> tests/ui/contract/fail/trait-message-selector-overlap-3.rs:19:1
   |
19 | #[ink::contract]
   | ^^^^^^^^^^^^^^^^
   | |
   | cannot infer type
   | help: use the fully qualified path to an implementation: `<Type as ImpliesReturn>::message1Output`
   |
   = note: multiple `impl`s satisfying `_: ImpliesReturn<()>` found in the `ink` crate:
           - impl<Args, RetType> ImpliesReturn<RetType> for Execution<Args, RetType>;
           - impl<E, CallType, Args> ImpliesReturn<()> for ink::ink_env::call::CallBuilder<E, Set<CallType>, Set<ExecutionInput<Args>>, Set<()>>
             where E: ink::ink_env::Environment;
           - impl<T, E, CallType, Args> ImpliesReturn<T> for ink::ink_env::call::CallBuilder<E, Set<CallType>, Set<ExecutionInput<Args>>, Set<ReturnType<T>>>
             where E: ink::ink_env::Environment;
           - impl<T> ImpliesReturn<T> for T;
   = note: associated types cannot be accessed directly on a `trait`, they can only be accessed through a specific `impl`
note: required by a bound in `TraitDefinition1::message1Output`
  --> tests/ui/contract/fail/trait-message-selector-overlap-3.rs:6:9
   |
4  |       #[ink::trait_definition]
   |       ------------------------ required by a bound in this associated type
5  |       pub trait TraitDefinition1 {
6  | /         #[ink(message, selector = 42)]
7  | |         fn message1(&self);
   | |___________________________^ required by this bound in `TraitDefinition1::message1Output`
   = note: this error originates in the attribute macro `ink::contract` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0283]: type annotations needed
  --> tests/ui/contract/fail/trait-message-selector-overlap-3.rs:19:1
   |
19 | #[ink::contract]
   | ^^^^^^^^^^^^^^^^
   | |
   | cannot infer type
   | help: use the fully qualified path to an implementation: `<Type as ImpliesReturn>::message2Output`
   |
   = note: multiple `impl`s satisfying `_: ImpliesReturn<()>` found in the `ink` crate:
           - impl<Args, RetType> ImpliesReturn<RetType> for Execution<Args, RetType>;
           - impl<E, CallType, Args> ImpliesReturn<()> for ink::ink_env::call::CallBuilder<E, Set<CallType>, Set<ExecutionInput<Args>>, Set<()>>
             where E: ink::ink_env::Environment;
           - impl<T, E, CallType, Args> ImpliesReturn<T> for ink::ink_env::call::CallBuilder<E, Set<CallType>, Set<ExecutionInput<Args>>, Set<ReturnType<T>>>
             where E: ink::ink_env::Environment;
           - impl<T> ImpliesReturn<T> for T;
   = note: associated types cannot be accessed directly on a `trait`, they can only be accessed through a specific `impl`
note: required by a bound in `TraitDefinition2::message2Output`
  --> tests/ui/contract/fail/trait-message-selector-overlap-3.rs:14:9
   |
12 |       #[ink::trait_definition]
   |       ------------------------ required by a bound in this associated type
13 |       pub trait TraitDefinition2 {
14 | /         #[ink(message, selector = 42)]
15 | |         fn message2(&self);
   | |___________________________^ required by this bound in `TraitDefinition2::message2Output`
   = note: this error originates in the attribute macro `ink::contract` (in Nightly builds, run with -Z macro-backtrace for more info)
