error[E0277]: the trait bound `NonCodec: WrapperTypeDecode` is not satisfied
 --> tests/ui/trait_def/fail/message_input_non_codec.rs:6:23
  |
6 |     fn message(&self, input: NonCodec);
  |                       ^^^^^^^^^^^^^^^ the trait `WrapperTypeDecode` is not implemented for `NonCodec`
  |
  = help: the following other types implement trait `WrapperTypeDecode`:
            Arc<T>
            Box<T>
            Rc<T>
            sp_core::Bytes
  = note: required for `NonCodec` to implement `ink::parity_scale_codec::Decode`
note: required by a bound in `DispatchInput`
 --> src/codegen/dispatch/type_check.rs
  |
  | pub struct DispatchInput<T>(T)
  |            ------------- required by a bound in this struct
  | where
  |     T: scale::Decode + 'static;
  |        ^^^^^^^^^^^^^ required by this bound in `DispatchInput`

error[E0277]: the trait bound `NonCodec: AbiEncodeWith<_>` is not satisfied
 --> tests/ui/trait_def/fail/message_input_non_codec.rs:3:1
  |
3 |   #[ink::trait_definition]
  |   ^^^^^^^^^^^^^^^^^^^^^^^^ the trait `AbiEncodeWith<_>` is not implemented for `NonCodec`
4 |   pub trait TraitDefinition {
5 | /     #[ink(message)]
6 | |     fn message(&self, input: NonCodec);
  | |_______________________________________- required by a bound introduced by this call
  |
note: required by a bound in `ExecutionInput::<ArgumentList<ArgumentListEnd, ArgumentListEnd, Abi>, Abi>::push_arg`
 --> $WORKSPACE/crates/env/src/call/execution.rs
  |
  |     pub fn push_arg<T>(
  |            -------- required by a bound in this associated function
...
  |         T: AbiEncodeWith<Abi>,
  |            ^^^^^^^^^^^^^^^^^^ required by this bound in `ExecutionInput::<ArgumentList<ArgumentListEnd, ArgumentListEnd, Abi>, Abi>::push_arg`

error[E0277]: the trait bound `ArgumentList<Argument<NonCodec>, ArgumentList<ArgumentListEnd, ArgumentListEnd, ink::abi::Ink>, ink::abi::Ink>: AbiEncodeWith<ink::abi::Ink>` is not satisfied
 --> tests/ui/trait_def/fail/message_input_non_codec.rs:5:5
  |
5 | /     #[ink(message)]
6 | |     fn message(&self, input: NonCodec);
  | |_______________________________________^ unsatisfied trait bound
  |
  = help: the trait `Encode` is not implemented for `ArgumentList<Argument<NonCodec>, ArgumentList<ArgumentListEnd, ArgumentListEnd, ink::abi::Ink>, ink::abi::Ink>`
  = help: the following other types implement trait `Encode`:
            ArgumentList<Argument<Head>, Rest, ink::abi::Ink>
            ArgumentList<ArgumentListEnd, ArgumentListEnd, ink::abi::Ink>
  = note: required for `ArgumentList<Argument<NonCodec>, ArgumentList<ArgumentListEnd, ArgumentListEnd, ink::abi::Ink>, ink::abi::Ink>` to implement `AbiEncodeWith<ink::abi::Ink>`
note: required by a bound in `Execution::<Args, Output, Abi>::new`
 --> $WORKSPACE/crates/env/src/call/execution.rs
  |
  |     Args: AbiEncodeWith<Abi>,
  |           ^^^^^^^^^^^^^^^^^^ required by this bound in `Execution::<Args, Output, Abi>::new`
...
  |     pub fn new(input: ExecutionInput<Args, Abi>) -> Self {
  |            --- required by a bound in this associated function

error[E0599]: the method `try_invoke` exists for struct `CallBuilder<E, Set<Call>, Set<ExecutionInput<ArgumentList<Argument<NonCodec>, ArgumentList<ArgumentListEnd, ArgumentListEnd, Ink>, Ink>, Ink>>, Set<ReturnType<()>>>`, but its trait bounds were not satisfied
 --> tests/ui/trait_def/fail/message_input_non_codec.rs:5:5
  |
5 |       #[ink(message)]
  |  _____^
6 | |     fn message(&self, input: NonCodec);
  | |_______________________________________^
  |
 ::: $WORKSPACE/crates/env/src/call/execution.rs
  |
  |   pub struct ArgumentList<Head, Rest, Abi> {
  |   ---------------------------------------- doesn't satisfy `_: AbiEncodeWith<Ink>` or `_: Encode`
  |
  = note: the following trait bounds were not satisfied:
          `ArgumentList<Argument<NonCodec>, ArgumentList<ArgumentListEnd, ArgumentListEnd, ink::abi::Ink>, ink::abi::Ink>: Encode`
          which is required by `ArgumentList<Argument<NonCodec>, ArgumentList<ArgumentListEnd, ArgumentListEnd, ink::abi::Ink>, ink::abi::Ink>: AbiEncodeWith<ink::abi::Ink>`
